<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.service<% if (service === 'serviceImpl') { %>.impl<% } %>;

<%_
const serviceClassName = service === 'serviceImpl' ? entityClass + 'ServiceImpl' : entityClass + 'Service';
const instanceType = (dto === 'mapstruct') ? asDto(entityClass) : asEntity(entityClass);
const instanceName = (dto === 'mapstruct') ? asDto(entityInstance) : asEntity(entityInstance);
const optionalOrMono = (reactive === true) ? 'Mono' : 'Optional';
const listOrFlux = (reactive === true) ? 'Flux' : 'List';
const pageOrFlux = (reactive === true) ? 'Flux' : 'Page';
const mapper = entityInstance  + 'Mapper';
const dtoToEntity = mapper + '.'+ 'toEntity';
const entityToDto = 'toDto';
const entityToDtoReference = mapper + '::'+ 'toDto';
const repository = entityInstance  + 'Repository';
const searchRepository = entityInstance  + 'SearchRepository';
let isUsingMapsId = false;
let mapsIdAssoc;
for (idx in relationships) {
    isUsingMapsId = relationships[idx].useJPADerivedIdentifier === true;
    if (isUsingMapsId) {
        mapsIdAssoc = relationships[idx];
        break;
    }
}
_%>
<%_ if (service === 'serviceImpl') { _%>
import <%= packageName %>.service.<%= entityClass %>Service;
<%_ } _%>
import <%= packageName %>.service.IdentifierService; //@Trifon-sequence
import <%= packageName %>.domain.Identifier; //@Trifon-sequence
import <%= packageName %>.domain.<%= asEntity(entityClass) %>;
import <%= packageName %>.domain.<%= entityClass %>Builder; //@Trifon
import <%= packageName %>.repository.<%= entityClass %>Repository;
<%_ if (isUsingMapsId === true) { _%>
import <%= packageName %>.repository.<%= mapsIdAssoc.otherEntityNameCapitalized %>Repository;
<%_ } _%>
<%_ if (searchEngine === 'elasticsearch') { _%>
import <%= packageName %>.repository.search.<%= entityClass %>SearchRepository;
<%_ } _%>
<%_ if (dto === 'mapstruct') { _%>
import <%= packageName %>.service.dto.IdentifierDTO; //@Trifon-sequence
import <%= packageName %>.service.dto.<%= asDto(entityClass) %>;
import <%= packageName %>.service.mapper.IdentifierMapper; //@Trifon-sequence
import <%= packageName %>.service.mapper.<%= entityClass %>Mapper;
<%_ } _%>
import <%= packageName %>.service.util.SequenceUtil; //@Trifon-sequence

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.math.BigDecimal; //@Trifon
import java.time.Instant; //@Trifon
import java.time.ZoneId; //@Trifon
import java.time.format.DateTimeFormatter; //@Trifon
import java.time.format.DateTimeFormatterBuilder; //@Trifon
import java.time.temporal.ChronoField; //@Trifon

import org.springframework.beans.factory.annotation.Autowired; //@Trifon-sequence
<%_ if (pagination !== 'no' || fieldsContainOwnerManyToMany === true) { _%>
    <%_ if (!reactive) { _%>
import org.springframework.data.domain.Page;
    <%_ } _%>
import org.springframework.data.domain.Pageable;
<%_ } _%>
import org.springframework.stereotype.Service;
<%_ if (databaseType === 'sql') { _%>
import org.springframework.transaction.annotation.Transactional;
<%_ } _%>
<%_ if (reactiveRepositories) { _%>
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
<%_ } _%>

import java.util.Map; //@Trifon
import java.util.HashMap; //@Trifon
<%_ if (dto === 'mapstruct' && (pagination === 'no' ||  fieldsContainNoOwnerOneToOne === true)) { _%>
import java.util.LinkedList;
<%_ } _%>
<%_ if (pagination === 'no' ||  fieldsContainNoOwnerOneToOne === true) { _%>
import java.util.List;
<%_ } _%>
<%_ if (!reactive) { _%>
import java.util.Optional;
<%_ } _%>
<%_ if (databaseType === 'cassandra') { _%>
import java.util.UUID;
<%_ } _%>
<%_ if (fieldsContainNoOwnerOneToOne === true || (pagination === 'no' && ((searchEngine !== false) || dto === 'mapstruct'))) { _%>
import java.util.stream.Collectors;
<%_ } _%>
<%_ if (fieldsContainNoOwnerOneToOne === true || (pagination === 'no' && searchEngine === 'elasticsearch')) { _%>
import java.util.stream.StreamSupport;
<%_ } _%>
<%_ if (searchEngine === 'elasticsearch') { _%>

import static org.elasticsearch.index.query.QueryBuilders.*;
<%_ } _%>

/**
 * Service Implementation for managing {@link <%= asEntity(entityClass) %>}.
 */
@Service<% if (databaseType === 'sql') { %>
@Transactional<% } %>
public class <%= serviceClassName %><% if (service === 'serviceImpl') { %> implements <%= entityClass %>Service<% } %> {

    private final Logger log = LoggerFactory.getLogger(<%= serviceClassName %>.class);

	//@Trifon - sequence
	@Autowired
	private IdentifierService identifierService;
	@Autowired
	private IdentifierMapper identifierMapper;
<%- include('../../common/inject_template', {asEntity, asDto, viaService: false, constructorName: serviceClassName, queryService: false, isUsingMapsId: isUsingMapsId, mapsIdAssoc: mapsIdAssoc, isController: false}); -%>

	//@Trifon - sequence
	public void setSequenceValue(<%= entityClass %> <%= entityInstance %>) {
		// @Trifon - set SequenceNumber if id is null!
		if (<%= entityInstance %>.getId() == null) {
<%_ var index = 0;
    for (idx in fields) {
      const fieldName = fields[idx].fieldName;
      const fieldSequence = fields[idx].fieldSequence;
      const fieldSequenceName = fieldSequence.name;
      const fieldSequencePrefix = fieldSequence.prefix;
      const fieldSequenceSuffix = fieldSequence.suffix;
      const fieldSequenceNextValue = fieldSequence.nextValue;
      const fieldSequenceIncrementValue = fieldSequence.incrementValue;

      index = index + 1;
      if (fieldSequence && fieldSequence !== '') {
      _%>
			if (<%= entityInstance %>.get<%= firstToUpper(fieldName) %>() == null || "<GENERATED>".equalsIgnoreCase(<%= entityInstance %>.get<%= firstToUpper(fieldName) %>())) {
				String <%= fieldName %>SequenceName = SequenceUtil.evaluateSequenceName(<%= entityInstance %>, "<%= fieldSequenceName %>"); //"order.documentType:#{documentType.id};documentNo");
				log.debug("<%= fieldName %>SequenceName = " + <%= fieldName %>SequenceName);

				Optional<IdentifierDTO> <%= fieldName %>SequenceOpt = identifierService.findOneBySequenceName(<%= fieldName %>SequenceName);
				IdentifierDTO <%= fieldName %>Sequence = null;
				if (<%= fieldName %>SequenceOpt.isPresent()) {
					<%= fieldName %>Sequence = <%= fieldName %>SequenceOpt.get();
				} else {
					<%= fieldName %>Sequence = identifierMapper.toDto( new Identifier().sequenceName(<%= fieldName %>SequenceName).nextValue(<%= fieldSequenceNextValue %>L).incrementValue(<%= fieldSequenceIncrementValue %>L).prefix("<%= fieldSequencePrefix %>").suffix("<%= fieldSequenceSuffix %>"));
				}
				<%= entityInstance %>.set<%= firstToUpper(fieldName) %>(<%= fieldName %>Sequence.getPrefix() + <%= fieldName %>Sequence.getNextValue() + <%= fieldName %>Sequence.getSuffix());
				<%= fieldName %>Sequence.setNextValue(<%= fieldName %>Sequence.getNextValue() + <%= fieldName %>Sequence.getIncrementValue());
				identifierService.save(<%= fieldName %>Sequence);
			}

<%_ } } _%>
		}
	}

    /**
     * Save a <%= entityInstance %>.
     *
     * @param <%= instanceName %> the entity to save.
     * @return the persisted entity.
     */
    <%_ if (service === 'serviceImpl') { _%>
    @Override
    <%_ } _%>
    public <% if (reactive) { %>Mono<<% } %><%= instanceType %><% if (reactive) { %>><% } %> save(<%= instanceType %> <%= instanceName %>) {
        log.debug("Request to save <%= instanceType %> : {}", <%= instanceName %>); //@Trifon
<%- include('../../common/nullify-file-name_template', {useDTO: true}); -%>
        <%_ if (!reactive) { _%>
<%- include('../../common/save_template', {asEntity, asDto, viaService: false, returnDirectly: true, isUsingMapsId: isUsingMapsId, mapsIdAssoc: mapsIdAssoc, isController: false}); -%>
        <%_ } else { _%>
<%- include('../../common/save_reactive_template', {asEntity, asDto, viaService: false, returnDirectly: true}); -%>
        <%_ } _%>
    }

	/**
	 * Save a <%= entityInstance %>.
	 *
	 * @param <%= instanceName %> the entity to save.
	 * @return the persisted entity.
	 */
	<%_ if (service === 'serviceImpl') { _%>
	@Override
	<%_ } _%>
	// @Trifon
	public <%= entityClass %> save(<%= entityClass %> <%= entityInstance %>) {
		log.debug("Request to save <%= entityClass %> : {}", <%= entityInstance %>);
<%- include('../../common/nullify-file-name_template', {useDTO: false}); -%>

		setSequenceValue(<%= asEntity(entityInstance) %>); //@Trifon - sequence

		<%= entityInstance %> = <%= entityInstance %>Repository.save(<%= entityInstance %>);
		<%_ if (searchEngine === 'elasticsearch') { _%>
		<%= entityInstance %>SearchRepository.save(<%= entityInstance %>);
		<%_ } _%>
		return <%= entityInstance %>;
	}

    /**
     * Get all the <%= entityInstancePlural %>.
     *<% if (pagination !== 'no') { %>
     * @param pageable the pagination information.<% } %>
     * @return the list of entities.
     */
    <%_ if (service === 'serviceImpl') { _%>
    @Override
    <%_ } _%>
    <%_ if (databaseType === 'sql') { _%>
    @Transactional(readOnly = true)
    <%_ } _%>
    public <% if (pagination !== 'no') { %><%= pageOrFlux %><<%= instanceType %><% } else { %><%= listOrFlux %><<%= instanceType %><% } %>> findAll(<% if (pagination !== 'no') { %>Pageable pageable<% } %>) {
        log.debug("Request to get all <%= entityClassPlural %>");
        <%_ if (pagination === 'no') { _%>
        return <%= entityInstance %>Repository.<% if (fieldsContainOwnerManyToMany === true) { %>findAllWithEagerRelationships<% } else { %>findAll<% } %>()<% if (dto === 'mapstruct') { %><% if (!reactive) { %>.stream()<% } %>
            .map(<%= entityToDtoReference %>)<% if (!reactive) { %>
            .collect(Collectors.toCollection(LinkedList::new))<% } } %>;
        <%_ } else { _%>
        return <%= entityInstance %>Repository.findAll<% if (reactive) { %>By<% } %>(pageable)<% if (dto !== 'mapstruct') { %>;<% } else { %>
            .map(<%= entityToDtoReference %>);<% } %>
        <%_ } _%>
    }

    <%_ if (fieldsContainOwnerManyToMany === true) { _%>

    /**
     * Get all the <%= entityInstancePlural %> with eager load of many-to-many relationships.
     *
     * @return the list of entities.
     */
    public <%= pageOrFlux %><<%= instanceType %>> findAllWithEagerRelationships(Pageable pageable) {
        return <%= entityInstance %>Repository.findAllWithEagerRelationships(pageable)<% if (dto !== 'mapstruct') { %>;<% } else { %>.map(<%= entityToDtoReference %>);<% } %>
    }
    <%_ } _%>
<%- include('../../common/get_filtered_template', {asEntity, asDto}); -%>
<%_ if (reactive) { _%>
    /**
    * Returns the number of <%= entityInstancePlural %> available.
    *
    */
    public Mono<Long> countAll() {
        return <%= entityInstance %>Repository.count();
    }
    <%_ if (searchEngine === 'elasticsearch') { _%>

    /**
    * Returns the number of <%= entityInstancePlural %> available in search repository.
    *
    */
    public Mono<Long> searchCount() {
        return <%= entityInstance %>SearchRepository.count();
    }
    <%_  } _%>

<%_  } _%>
    /**
     * Get one <%= entityInstance %> by id.
     *
     * @param id the id of the entity.
     * @return the entity.
     */
    <%_ if (service === 'serviceImpl') { _%>
    @Override
    <%_ } _%>
    <%_ if (databaseType === 'sql') { _%>
    @Transactional(readOnly = true)
    <%_ } _%>
    public <%= optionalOrMono %><<%= instanceType %>> findOne(<%= primaryKeyType %> id) {
        log.debug("Request to get <%= entityClass %> by id: {}", id);<%- include('../../common/get_template', {asEntity, asDto, viaService: false, returnDirectly:true}); -%>
    }

    /**
     * Delete the <%= entityInstance %> by id.
     *
     * @param id the id of the entity.
     */
    <%_ if (service === 'serviceImpl') { _%>
    @Override
    <%_ } _%>
    public <%- reactive ? 'Mono<Void>' : 'void' %> delete(<%= primaryKeyType %> id) {
        log.debug("Request to delete <%= entityClass %> by Id: {}", id);
<%- include('../../common/delete_template', {viaService: false, fromResource: false}); -%>
    }
    <%_ if (searchEngine !== false) { _%>

    /**
     * Search for the <%= entityInstance %> corresponding to the query.
     *
     * @param query the query of the search.<% if (pagination !== 'no') { %>
     * @param pageable the pagination information.<% } %>
     * @return the list of entities.
     */
    <%_ if (service === 'serviceImpl') { _%>
    @Override
    <%_ } _%>
    <%_ if (databaseType === 'sql') { _%>
    @Transactional(readOnly = true)
    <%_ } _%>
    public <% if (pagination !== 'no') { %><%= pageOrFlux %><<%= instanceType %><% } else { %><%= listOrFlux %><<%= instanceType %><% } %>> search(String query<% if (pagination !== 'no') { %>, Pageable pageable<% } %>) {
        <%_ if (pagination === 'no') { _%>
        log.debug("Request to search <%= entityClassPlural %> for query {}", query);<%- include('../../common/search_stream_template', {viaService: false, fromResource: false}); -%>
        <%_ } else { _%>
        log.debug("Request to search for a page of <%= entityClassPlural %> for query {}", query);
        return <%= entityInstance %><% if (searchEngine === 'elasticsearch') { %>Search<% } %>Repository.search(<% if (searchEngine === 'elasticsearch') { %><%= reactive ? 'query' : 'queryStringQuery(query)' %><% } else { %><%= entityClass %>.PREFIX, query<% } %>, pageable)<%_ if (dto !== 'mapstruct') { _%>;<% } else { %>
            .map(<%= entityToDtoReference %>);
        <%_ } } _%>
    }
    <%_ } _%>

	//@Trifon
	public Map<String, String> columnsToNameValueMap(String[] columns) {
		Map<String, String> result = new HashMap<>();

		if (columns.length > 0) {
			result.put("id", columns[0]);
		}
<%_ var index = 0;
    for (idx in fields) {
      const fieldName = fields[idx].fieldName;
      index = index + 1;
      _%>
		if (columns.length > <%= index %>) {
			result.put("<%= fieldName %>", columns[<%= index %>]);
		}
<%_	}

	// @Trifon - iterate relationships
    index = index + 1;
    for (idx in relationships) {
        columnValue = 'Long.parseLong(columns['+ index +'])';
    
        const otherEntityRelationshipName = relationships[idx].otherEntityRelationshipName;
        const otherEntityRelationshipNamePlural = relationships[idx].otherEntityRelationshipNamePlural;
        const otherEntityIsEmbedded = relationships[idx].otherEntityIsEmbedded;
        const relationshipName = relationships[idx].relationshipName;
        const relationshipFieldName = relationships[idx].relationshipFieldName;
        const relationshipFieldNamePlural = relationships[idx].relationshipFieldNamePlural;
        const joinTableName = getJoinTableName(entityTableName, relationshipName, prodDatabaseType);
        const relationshipType = relationships[idx].relationshipType;
        const relationshipValidate = relationships[idx].relationshipValidate;
        const relationshipRequired = relationships[idx].relationshipRequired;
        const otherEntityNameCapitalized = relationships[idx].otherEntityNameCapitalized;
        const ownerSide = relationships[idx].ownerSide;
        const isUsingMapsId = relationships[idx].useJPADerivedIdentifier;
        if (otherEntityRelationshipName) {
            mappedBy = otherEntityRelationshipName.charAt(0).toLowerCase() + otherEntityRelationshipName.slice(1)
        }
        if (relationshipType === 'many-to-one' && relationshipRequired) {
            if (databaseType === 'sql') { _%>
		if (columns.length > <%= index %>) {
			result.put("<%= relationshipName %>_id", columns[<%= index %>]);
		}
    <%_         index = index + 1; } } } _%>

		return result;
	}

<%_ for (idx in fields) {
      const fieldType = fields[idx].fieldType;
      const fieldTypeBlobContent = fields[idx].fieldTypeBlobContent;
      const fieldName = fields[idx].fieldName;
      const fieldInJavaBeanMethod = fields[idx].fieldInJavaBeanMethod;

      if (fields[idx].fieldValidate === true && fields[idx].fieldValidateRules.includes('unique')) { _%>
    //@Trifon
    /**
     * Get one <%= entityInstance %> by <%= fieldName %>.
     *
     * @param <%= fieldName %> the <%= fieldName %> of the entity.
     * @return the entity.
     */
    <%_ if (service === 'serviceImpl') { _%>
    @Override
    <%_ } _%>
    <%_ if (databaseType === 'sql') { _%>
    @Transactional(readOnly = true)
    <%_ } _%>
    public Optional<<%= instanceType %>> findOneBy<%= fieldInJavaBeanMethod %>(<%= fieldType %> <%= fieldName %>) {
      log.debug("Request to get <%= entityClass %> by <%= fieldName %>: {}", <%= fieldName %>);<%- include('../../common/get_by_unique_template', {viaService: false, returnDirectly: true, fieldName: fieldName, fieldInJavaBeanMethod: fieldInJavaBeanMethod}); -%>
    }

	//@Trifon
	/**
	 * Get or Create <%= entityInstance %> by <%= fieldName %>.
	 *
	 * @return the entity.
	 */
	public <%= entityClass %> getOrCreate<%= entityClass %>By<%= fieldInJavaBeanMethod %>(<%= entityClass %> param<%= entityClass %>) {
		<%= entityClass %> <%= entityInstance %> = <%= entityInstance %>Repository.findOneBy<%= fieldInJavaBeanMethod %>(param<%= entityClass %>.get<%= fieldInJavaBeanMethod %>())
				.orElse(null);
		if (<%= entityInstance %> == null) {
			<%= entityInstance %> = save(param<%= entityClass %>);
		}
		log.debug("Trifon - <%= entityClass %>.Id = " + <%= entityInstance %>.getId());

		return <%= entityInstance %>;
	}

	//@Trifon
	private BigDecimal parseBigDecimalColumn(String[] columns, int indx) {
		BigDecimal result = null;
		if (columns.length > indx && columns[indx] != null && !columns[indx].isEmpty()) {
			String contents = columns[indx];
			contents = contents.replaceAll(" ", "");
			contents = contents.replaceAll("\t", "");
			if (!contents.isEmpty()) {
				result = new BigDecimal(contents);
			}
		}
		return result;
	}
	//@Trifon
	private BigDecimal parseBigDecimalColumn(String str) {
		BigDecimal result = null;
		if (str != null && !str.isEmpty()) {
			String contents = str.replaceAll(" ", "");
			contents = contents.replaceAll("\t", "");
			if (!contents.isEmpty()) {
				result = new BigDecimal(contents);
			}
		}
		return result;
	}

	//@Trifon
	/**
	 * Import one <%= entityInstance %> by <%= fieldName %>.
	 *
	 * @param columns list of columns.
	 * @return the entity.
	 */
	public <%= instanceType %> import<%= entityClass %>By<%= fieldInJavaBeanMethod %>(String[] columns) {
		DateTimeFormatter FMT = new DateTimeFormatterBuilder()
			.appendPattern("yyyy-MM-dd")
			.parseDefaulting(ChronoField.NANO_OF_DAY, 0)
			.toFormatter()
			.withZone(ZoneId.systemDefault()); // ZoneId.of("Europe/Sofia")

<%_ let numFields = 0;
    for (idx2 in fields) {
      let fieldType2 = fields[idx2].fieldType;
      const fieldTypeBlobContent2 = fields[idx2].fieldTypeBlobContent;
      const fieldName2 = fields[idx2].fieldName;
      const fieldInJavaBeanMethod2 = fields[idx2].fieldInJavaBeanMethod;

      if ((fieldType2 === 'byte[]' || fieldType2 === 'ByteBuffer') && fieldTypeBlobContent2 === 'text') {
        fieldType2 = "String";
      }
      // SKIP IMAGE
      if ((fieldType2 === 'byte[]' || fieldType2 === 'ByteBuffer') && fieldTypeBlobContent2 === 'image') {
        continue;
      }

      numFields = numFields + 1;
      let columnValue = 'columns['+ idx2 + ']';
      if (fieldType2.toLowerCase() === 'integer') {
        columnValue = 'Integer.parseInt(columns['+ idx2 +'])';

      } else if (fieldType2.toLowerCase() === 'long') {
        columnValue = 'Long.parseLong(columns['+ idx2 +'])';

      } else if (fieldType2.toLowerCase() === 'float') {
        columnValue = 'Float.parseFloat(columns['+ idx2 +'])';

      } else if (fieldType2.toLowerCase() === 'double') {
        columnValue = 'Double.parseDouble(columns['+ idx2 +'])';

      } else if (fieldType2.toLowerCase() === 'bigdecimal') {
        columnValue = 'parseBigDecimalColumn(columns, '+ idx2 +')';

      } else if (fieldType2.toLowerCase() === 'boolean') {
        columnValue = 'Boolean.valueOf(columns['+ idx2 +'])';
      } else if (fieldType2.toLowerCase() === 'instant') {
        columnValue = 'FMT.parse(columns['+ idx2 +'], Instant::from)';
      }
      _%>
		<%= fieldType2 %> <%= fieldName2 %> = null;
		if (columns.length > <%= idx2 %>) {
			<%= fieldName2 %> = <%= columnValue %>;
		}
<%_	}

	// @Trifon - iterate relationships
//	numFields = numFields + 1;
    for (idx in relationships) {
        columnValue = 'Long.parseLong(columns['+ numFields +'])';
    
        const otherEntityRelationshipName = relationships[idx].otherEntityRelationshipName;
        const otherEntityRelationshipNamePlural = relationships[idx].otherEntityRelationshipNamePlural;
        const otherEntityIsEmbedded = relationships[idx].otherEntityIsEmbedded;
        const relationshipName = relationships[idx].relationshipName;
        const relationshipFieldName = relationships[idx].relationshipFieldName;
        const relationshipFieldNamePlural = relationships[idx].relationshipFieldNamePlural;
        const joinTableName = getJoinTableName(entityTableName, relationshipName, prodDatabaseType);
        const relationshipType = relationships[idx].relationshipType;
        const relationshipValidate = relationships[idx].relationshipValidate;
        const relationshipRequired = relationships[idx].relationshipRequired;
        const otherEntityNameCapitalized = relationships[idx].otherEntityNameCapitalized;
        const ownerSide = relationships[idx].ownerSide;
        const isUsingMapsId = relationships[idx].useJPADerivedIdentifier;
        if (otherEntityRelationshipName) {
            mappedBy = otherEntityRelationshipName.charAt(0).toLowerCase() + otherEntityRelationshipName.slice(1)
        }
        if (relationshipType === 'many-to-one' && relationshipRequired) {
            if (databaseType === 'sql') { _%>
		Long <%= relationshipName %>Id = null;
		if (columns.length > <%= numFields %>) {
			<%= relationshipName %>Id = <%= columnValue %>;
		}
    <%_         numFields = numFields + 1; } } } _%>

		<%= instanceType %> <%= instanceName %> = null;
		// +01) Search for existing <%= instanceName %> by <%= fieldName %>
		Optional<<%= instanceType %>> optional<%= instanceType %> = findOneBy<%= fieldInJavaBeanMethod %>(<%= fieldName %>);
		if (optional<%= instanceType %>.isPresent()) {
			<%= instanceName %> = optional<%= instanceType %>.get();
		} else {
			<%= instanceName %> = new <%= instanceType %>();
			<%= instanceName %>.set<%= fieldInJavaBeanMethod %>(<%= fieldName %>);
			// +02) Set default values
//			setDefaultValues(<%= instanceName %>);
		}

		// +03) Update <%= instanceName %>
<%_ for (idx2 in fields) {
      let fieldType2 = fields[idx2].fieldType;
      const fieldTypeBlobContent2 = fields[idx2].fieldTypeBlobContent;
      const fieldName2 = fields[idx2].fieldName;
      const fieldInJavaBeanMethod2 = fields[idx2].fieldInJavaBeanMethod;
      // SKIP IMAGE
      if ((fieldType2 === 'byte[]' || fieldType2 === 'ByteBuffer') && fieldTypeBlobContent2 === 'image') {
        continue;
      }
      _%>
		<%= instanceName %>.set<%= fieldInJavaBeanMethod2 %>(<%= fieldName2 %>);
<%_	}

	// @Trifon - iterate relationships
    for (idx in relationships) {
        const otherEntityRelationshipName = relationships[idx].otherEntityRelationshipName;
        const otherEntityRelationshipNamePlural = relationships[idx].otherEntityRelationshipNamePlural;
        const otherEntityIsEmbedded = relationships[idx].otherEntityIsEmbedded;
        const relationshipName = relationships[idx].relationshipName;
        const relationshipNameCapitalized = relationships[idx].relationshipNameCapitalized;
        const relationshipFieldName = relationships[idx].relationshipFieldName;
        const relationshipFieldNamePlural = relationships[idx].relationshipFieldNamePlural;
        const joinTableName = getJoinTableName(entityTableName, relationshipName, prodDatabaseType);
        const relationshipType = relationships[idx].relationshipType;
        const relationshipValidate = relationships[idx].relationshipValidate;
        const relationshipRequired = relationships[idx].relationshipRequired;
        const otherEntityNameCapitalized = relationships[idx].otherEntityNameCapitalized;
        const ownerSide = relationships[idx].ownerSide;
        const isUsingMapsId = relationships[idx].useJPADerivedIdentifier;
        if (otherEntityRelationshipName) {
            mappedBy = otherEntityRelationshipName.charAt(0).toLowerCase() + otherEntityRelationshipName.slice(1)
        }
        if (relationshipType === 'many-to-one' && relationshipRequired) {
            if (databaseType === 'sql') { _%>
		<%= instanceName %>.set<%= relationshipNameCapitalized %>Id(<%= relationshipName %>Id);
    <%_ } } } _%>

		return <%= instanceName %>;
	}

	//@Trifon
	/**
	 * Import one <%= entityInstance %> by <%= fieldName %>.
	 *
	 * @param columnsMap map of column name and value.
	 * @return the entity.
	 */
	public <%= instanceType %> import<%= entityClass %>By<%= fieldInJavaBeanMethod %>(Map<String, String> columnsMap) {
		DateTimeFormatter FMT = new DateTimeFormatterBuilder()
			.appendPattern("yyyy-MM-dd'T'HH:mm:ss") //@Trifon; old: "yyyy-MM-dd"
//			.parseDefaulting(ChronoField.NANO_OF_DAY, 0) // @Trifon
			.toFormatter()
			.withZone(ZoneId.systemDefault()); // ZoneId.of("Europe/Sofia")

<%_ for (idx2 in fields) {
      let fieldType2 = fields[idx2].fieldType;
      const fieldTypeBlobContent2 = fields[idx2].fieldTypeBlobContent;
      const fieldName2 = fields[idx2].fieldName;
      const fieldInJavaBeanMethod2 = fields[idx2].fieldInJavaBeanMethod;

      if ((fieldType2 === 'byte[]' || fieldType2 === 'ByteBuffer') && fieldTypeBlobContent2 === 'text') {
        fieldType2 = "String";
      }
      // SKIP IMAGE
      if ((fieldType2 === 'byte[]' || fieldType2 === 'ByteBuffer') && fieldTypeBlobContent2 === 'image') {
        continue;
      }

      let prefix = "";
      let suffix = "";
      if (fieldType2.toLowerCase() === 'integer') {
        prefix = "Integer.parseInt(";
        suffix = ")";

      } else if (fieldType2.toLowerCase() === 'long') {
        prefix = "Long.parseLong(";
        suffix = ")";

      } else if (fieldType2.toLowerCase() === 'float') {
        prefix = "Float.parseFloat(";
        suffix = ")";

      } else if (fieldType2.toLowerCase() === 'double') {
        prefix = "Double.parseDouble(";
        suffix = ")";

      } else if (fieldType2.toLowerCase() === 'bigdecimal') {
        prefix = "parseBigDecimalColumn(";
        suffix = ")";

      } else if (fieldType2.toLowerCase() === 'boolean') {
        prefix = "Boolean.valueOf(";
        suffix = ")";

      } else if (fieldType2.toLowerCase() === 'instant') {
        prefix = "FMT.parse(";
        suffix = ", Instant::from)";
      }
      _%>
		<%= fieldType2 %> <%= fieldName2 %> = null;
		if (columnsMap.containsKey("<%= fieldName2 %>")) {
			<%= fieldName2 %> = <%= prefix %>columnsMap.get("<%= fieldName2 %>")<%= suffix %>;
		}
<%_	}

	// @Trifon - iterate relationships
    for (idx in relationships) {
        let prefix = "Long.parseLong(";
        let suffix = ")";
    
        const otherEntityRelationshipName = relationships[idx].otherEntityRelationshipName;
        const otherEntityRelationshipNamePlural = relationships[idx].otherEntityRelationshipNamePlural;
        const otherEntityIsEmbedded = relationships[idx].otherEntityIsEmbedded;
        const relationshipName = relationships[idx].relationshipName;
        const relationshipFieldName = relationships[idx].relationshipFieldName;
        const relationshipFieldNamePlural = relationships[idx].relationshipFieldNamePlural;
        const joinTableName = getJoinTableName(entityTableName, relationshipName, prodDatabaseType);
        const relationshipType = relationships[idx].relationshipType;
        const relationshipValidate = relationships[idx].relationshipValidate;
        const relationshipRequired = relationships[idx].relationshipRequired;
        const otherEntityNameCapitalized = relationships[idx].otherEntityNameCapitalized;
        const ownerSide = relationships[idx].ownerSide;
        const isUsingMapsId = relationships[idx].useJPADerivedIdentifier;
        if (otherEntityRelationshipName) {
            mappedBy = otherEntityRelationshipName.charAt(0).toLowerCase() + otherEntityRelationshipName.slice(1)
        }
        if (relationshipType === 'many-to-one' && relationshipRequired) {
            if (databaseType === 'sql') { _%>
		Long <%= relationshipName %>Id = null;
		if (columnsMap.containsKey("<%= relationshipName %>_id")) {
			<%= relationshipName %>Id = <%= prefix %>columnsMap.get("<%= relationshipName %>_id")<%= suffix %>;
		}
    <%_ } } } _%>

		<%= instanceType %> <%= instanceName %> = null;
		// +01) Search for existing <%= instanceName %> by <%= fieldName %>
		Optional<<%= instanceType %>> optional<%= instanceType %> = findOneBy<%= fieldInJavaBeanMethod %>(<%= fieldName %>);
		if (optional<%= instanceType %>.isPresent()) {
			<%= instanceName %> = optional<%= instanceType %>.get();
		} else {
			<%= instanceName %> = new <%= instanceType %>();
			<%= instanceName %>.set<%= fieldInJavaBeanMethod %>(<%= fieldName %>);
			// +02) Set default values
//			setDefaultValues(<%= instanceName %>);
		}

		// +03) Update <%= instanceName %>
<%_ for (idx2 in fields) {
      let fieldType2 = fields[idx2].fieldType;
      const fieldTypeBlobContent2 = fields[idx2].fieldTypeBlobContent;
      const fieldName2 = fields[idx2].fieldName;
      const fieldInJavaBeanMethod2 = fields[idx2].fieldInJavaBeanMethod;
      // SKIP IMAGE
      if ((fieldType2 === 'byte[]' || fieldType2 === 'ByteBuffer') && fieldTypeBlobContent2 === 'image') {
        continue;
      }
      _%>
		<%= instanceName %>.set<%= fieldInJavaBeanMethod2 %>(<%= fieldName2 %>);
<%_	}

	// @Trifon - iterate relationships
    for (idx in relationships) {
        let prefix = "Long.parseLong(";
        let suffix = ")";
    
        const otherEntityRelationshipName = relationships[idx].otherEntityRelationshipName;
        const otherEntityRelationshipNamePlural = relationships[idx].otherEntityRelationshipNamePlural;
        const otherEntityIsEmbedded = relationships[idx].otherEntityIsEmbedded;
        const relationshipName = relationships[idx].relationshipName;
        const relationshipNameCapitalized = relationships[idx].relationshipNameCapitalized;
        const relationshipFieldName = relationships[idx].relationshipFieldName;
        const relationshipFieldNamePlural = relationships[idx].relationshipFieldNamePlural;
        const joinTableName = getJoinTableName(entityTableName, relationshipName, prodDatabaseType);
        const relationshipType = relationships[idx].relationshipType;
        const relationshipValidate = relationships[idx].relationshipValidate;
        const relationshipRequired = relationships[idx].relationshipRequired;
        const otherEntityNameCapitalized = relationships[idx].otherEntityNameCapitalized;
        const ownerSide = relationships[idx].ownerSide;
        const isUsingMapsId = relationships[idx].useJPADerivedIdentifier;
        if (otherEntityRelationshipName) {
            mappedBy = otherEntityRelationshipName.charAt(0).toLowerCase() + otherEntityRelationshipName.slice(1)
        }
        if (relationshipType === 'many-to-one' && relationshipRequired) {
            if (databaseType === 'sql') { _%>
		<%= instanceName %>.set<%= relationshipNameCapitalized %>Id(<%= relationshipName %>Id);
    <%_ } } } _%>

		return <%= instanceName %>;
	}
    <%_ }
    }
    _%>

	//@Trifon - multi-unique
	<%_ 
if (hasMultiUniqueConstraints(multiUniqueConstraints)) {
	for (idx in multiUniqueConstraints) {
		let findByNames = multiUniqueFindByNames(multiUniqueConstraints[idx]);
		let findByParameters = multiUniqueFindByParameters(multiUniqueConstraints[idx]);
		let findByParameterNamesOnly = multiUniqueFindByParameterNamesOnly(multiUniqueConstraints[idx]);
		let findByParameterNamesOnlyForLog = multiUniqueFindByParameterNamesOnlyForLog(multiUniqueConstraints[idx]);
		let findByOtherEntity = multiUniqueFindByOtherEntity(multiUniqueConstraints[idx], entityClass);
_%>
    //@Trifon - multi-unique
    <%_ if (service === 'serviceImpl') { _%>
    @Override
    <%_ } _%>
    <%_ if (databaseType === 'sql') { _%>
    @Transactional(readOnly = true)
    <%_ } _%>
    public Optional<<%= instanceType %>> findOneBy<%= findByNames %>(<%= findByParameters %>) {
      log.debug("Request to get <%= entityClass %> by <%= findByParameterNamesOnlyForLog %>", <%= findByParameterNamesOnly %>);<%- include('../../common/get_by_unique_template', {viaService: false, returnDirectly: true, fieldName: findByParameterNamesOnly, fieldInJavaBeanMethod: findByNames}); -%>
    }

	//@Trifon - multi-unique
	/**
	 * Get or Create <%= entityInstance %> by <%= findByNames %>.
	 *
	 * @return the entity.
	 */
	public <%= entityClass %> getOrCreate<%= entityClass %>By<%= findByNames %>(<%= entityClass %> param<%= entityClass %>) {
		<%= entityClass %> <%= entityInstance %> = <%= entityInstance %>Repository.findOneBy<%= findByNames %>(<%= findByOtherEntity %>)
				.orElse(null);
		if (<%= entityInstance %> == null) {
			<%= entityInstance %> = save(param<%= entityClass %>);
		}
		log.debug("Trifon - <%= entityClass %>.Id = " + <%= entityInstance %>.getId());

		return <%= entityInstance %>;
	}

	//@Trifon - multi-unique
	private BigDecimal parseBigDecimalColumn(String[] columns, int indx) {
		BigDecimal result = null;
		if (columns.length > indx && columns[indx] != null && !columns[indx].isEmpty()) {
			String contents = columns[indx];
			contents = contents.replaceAll(" ", "");
			contents = contents.replaceAll("\t", "");
			if (!contents.isEmpty()) {
				result = new BigDecimal(contents);
			}
		}
		return result;
	}
	//@Trifon - multi-unique
	private BigDecimal parseBigDecimalColumn(String str) {
		BigDecimal result = null;
		if (str != null && !str.isEmpty()) {
			String contents = str.replaceAll(" ", "");
			contents = contents.replaceAll("\t", "");
			if (!contents.isEmpty()) {
				result = new BigDecimal(contents);
			}
		}
		return result;
	}

	//@Trifon - multi-unique
	public <%= instanceType %> import<%= entityClass %>By<%= findByNames %>(String[] columns) {
		DateTimeFormatter FMT = new DateTimeFormatterBuilder()
			.appendPattern("yyyy-MM-dd")
			.parseDefaulting(ChronoField.NANO_OF_DAY, 0)
			.toFormatter()
			.withZone(ZoneId.systemDefault()); // ZoneId.of("Europe/Sofia")

<%_ let numFields = 0;
    for (idx2 in fields) {
      let fieldType2 = fields[idx2].fieldType;
      const fieldTypeBlobContent2 = fields[idx2].fieldTypeBlobContent;
      const fieldName2 = fields[idx2].fieldName;
      const fieldInJavaBeanMethod2 = fields[idx2].fieldInJavaBeanMethod;

      if ((fieldType2 === 'byte[]' || fieldType2 === 'ByteBuffer') && fieldTypeBlobContent2 === 'text') {
        fieldType2 = "String";
      }
      // SKIP IMAGE
      if ((fieldType2 === 'byte[]' || fieldType2 === 'ByteBuffer') && fieldTypeBlobContent2 === 'image') {
        continue;
      }

      numFields = numFields + 1;
      let columnValue = 'columns['+ idx2 + ']';
      if (fieldType2.toLowerCase() === 'integer') {
        columnValue = 'Integer.parseInt(columns['+ idx2 +'])';

      } else if (fieldType2.toLowerCase() === 'long') {
        columnValue = 'Long.parseLong(columns['+ idx2 +'])';

      } else if (fieldType2.toLowerCase() === 'float') {
        columnValue = 'Float.parseFloat(columns['+ idx2 +'])';

      } else if (fieldType2.toLowerCase() === 'double') {
        columnValue = 'Double.parseDouble(columns['+ idx2 +'])';

      } else if (fieldType2.toLowerCase() === 'bigdecimal') {
        columnValue = 'parseBigDecimalColumn(columns, '+ idx2 +')';

      } else if (fieldType2.toLowerCase() === 'boolean') {
        columnValue = 'Boolean.valueOf(columns['+ idx2 +'])';
      } else if (fieldType2.toLowerCase() === 'instant') {
        columnValue = 'FMT.parse(columns['+ idx2 +'], Instant::from)';
      }
      _%>
		<%= fieldType2 %> <%= fieldName2 %> = null;
		if (columns.length > <%= idx2 %>) {
			<%= fieldName2 %> = <%= columnValue %>;
		}
<%_	}

	// @Trifon - iterate relationships
//	numFields = numFields + 1;
    for (idx in relationships) {
        columnValue = 'Long.parseLong(columns['+ numFields +'])';
    
        const otherEntityRelationshipName = relationships[idx].otherEntityRelationshipName;
        const otherEntityRelationshipNamePlural = relationships[idx].otherEntityRelationshipNamePlural;
        const otherEntityIsEmbedded = relationships[idx].otherEntityIsEmbedded;
        const relationshipName = relationships[idx].relationshipName;
        const relationshipFieldName = relationships[idx].relationshipFieldName;
        const relationshipFieldNamePlural = relationships[idx].relationshipFieldNamePlural;
        const joinTableName = getJoinTableName(entityTableName, relationshipName, prodDatabaseType);
        const relationshipType = relationships[idx].relationshipType;
        const relationshipValidate = relationships[idx].relationshipValidate;
        const relationshipRequired = relationships[idx].relationshipRequired;
        const otherEntityNameCapitalized = relationships[idx].otherEntityNameCapitalized;
        const ownerSide = relationships[idx].ownerSide;
        const isUsingMapsId = relationships[idx].useJPADerivedIdentifier;
        if (otherEntityRelationshipName) {
            mappedBy = otherEntityRelationshipName.charAt(0).toLowerCase() + otherEntityRelationshipName.slice(1)
        }
        if (relationshipType === 'many-to-one' && relationshipRequired) {
            if (databaseType === 'sql') { _%>
		Long <%= relationshipName %>Id = null;
		if (columns.length > <%= numFields %>) {
			<%= relationshipName %>Id = <%= columnValue %>;
		}
    <%_         numFields = numFields + 1; } } } _%>

		<%= instanceType %> <%= instanceName %> = null;
		// +01) Search for existing <%= instanceName %> by <%= findByNames %>
		Optional<<%= instanceType %>> optional<%= instanceType %> = findOneBy<%= findByNames %>(<%= findByParameterNamesOnly %>);
		if (optional<%= instanceType %>.isPresent()) {
			<%= instanceName %> = optional<%= instanceType %>.get();
		} else {
			<%= instanceName %> = new <%= instanceType %>();
//			<%= instanceName %>.set<%= findByNames %>(<%= findByNames %>);
			// +02) Set default values
//			setDefaultValues(<%= instanceName %>);
		}

		// +03) Update <%= instanceName %>
<%_ for (idx2 in fields) {
      let fieldType2 = fields[idx2].fieldType;
      const fieldTypeBlobContent2 = fields[idx2].fieldTypeBlobContent;
      const fieldName2 = fields[idx2].fieldName;
      const fieldInJavaBeanMethod2 = fields[idx2].fieldInJavaBeanMethod;
      // SKIP IMAGE
      if ((fieldType2 === 'byte[]' || fieldType2 === 'ByteBuffer') && fieldTypeBlobContent2 === 'image') {
        continue;
      }
      _%>
		<%= instanceName %>.set<%= fieldInJavaBeanMethod2 %>(<%= fieldName2 %>);
<%_	}

	// @Trifon - iterate relationships
    for (idx in relationships) {
        const otherEntityRelationshipName = relationships[idx].otherEntityRelationshipName;
        const otherEntityRelationshipNamePlural = relationships[idx].otherEntityRelationshipNamePlural;
        const otherEntityIsEmbedded = relationships[idx].otherEntityIsEmbedded;
        const relationshipName = relationships[idx].relationshipName;
        const relationshipNameCapitalized = relationships[idx].relationshipNameCapitalized;
        const relationshipFieldName = relationships[idx].relationshipFieldName;
        const relationshipFieldNamePlural = relationships[idx].relationshipFieldNamePlural;
        const joinTableName = getJoinTableName(entityTableName, relationshipName, prodDatabaseType);
        const relationshipType = relationships[idx].relationshipType;
        const relationshipValidate = relationships[idx].relationshipValidate;
        const relationshipRequired = relationships[idx].relationshipRequired;
        const otherEntityNameCapitalized = relationships[idx].otherEntityNameCapitalized;
        const ownerSide = relationships[idx].ownerSide;
        const isUsingMapsId = relationships[idx].useJPADerivedIdentifier;
        if (otherEntityRelationshipName) {
            mappedBy = otherEntityRelationshipName.charAt(0).toLowerCase() + otherEntityRelationshipName.slice(1)
        }
        if (relationshipType === 'many-to-one' && relationshipRequired) {
            if (databaseType === 'sql') { _%>
		<%= instanceName %>.set<%= relationshipNameCapitalized %>Id(<%= relationshipName %>Id);
    <%_ } } } _%>

		return <%= instanceName %>;
	}

	//@Trifon - multi-unique
	public <%= instanceType %> import<%= entityClass %>By<%= findByNames %>(Map<String, String> columnsMap) {
		DateTimeFormatter FMT = new DateTimeFormatterBuilder()
			.appendPattern("yyyy-MM-dd'T'HH:mm:ss") //@Trifon; old: "yyyy-MM-dd"
//			.parseDefaulting(ChronoField.NANO_OF_DAY, 0) // @Trifon
			.toFormatter()
			.withZone(ZoneId.systemDefault()); // ZoneId.of("Europe/Sofia")

<%_ for (idx2 in fields) {
      let fieldType2 = fields[idx2].fieldType;
      const fieldTypeBlobContent2 = fields[idx2].fieldTypeBlobContent;
      const fieldName2 = fields[idx2].fieldName;
      const fieldInJavaBeanMethod2 = fields[idx2].fieldInJavaBeanMethod;

      if ((fieldType2 === 'byte[]' || fieldType2 === 'ByteBuffer') && fieldTypeBlobContent2 === 'text') {
        fieldType2 = "String";
      }
      // SKIP IMAGE
      if ((fieldType2 === 'byte[]' || fieldType2 === 'ByteBuffer') && fieldTypeBlobContent2 === 'image') {
        continue;
      }

      let prefix = "";
      let suffix = "";
      if (fieldType2.toLowerCase() === 'integer') {
        prefix = "Integer.parseInt(";
        suffix = ")";

      } else if (fieldType2.toLowerCase() === 'long') {
        prefix = "Long.parseLong(";
        suffix = ")";

      } else if (fieldType2.toLowerCase() === 'float') {
        prefix = "Float.parseFloat(";
        suffix = ")";

      } else if (fieldType2.toLowerCase() === 'double') {
        prefix = "Double.parseDouble(";
        suffix = ")";

      } else if (fieldType2.toLowerCase() === 'bigdecimal') {
        prefix = "parseBigDecimalColumn(";
        suffix = ")";

      } else if (fieldType2.toLowerCase() === 'boolean') {
        prefix = "Boolean.valueOf(";
        suffix = ")";

      } else if (fieldType2.toLowerCase() === 'instant') {
        prefix = "FMT.parse(";
        suffix = ", Instant::from)";
      }
      _%>
		<%= fieldType2 %> <%= fieldName2 %> = null;
		if (columnsMap.containsKey("<%= fieldName2 %>")) {
			<%= fieldName2 %> = <%= prefix %>columnsMap.get("<%= fieldName2 %>")<%= suffix %>;
		}
<%_	}

	// @Trifon - iterate relationships
    for (idx in relationships) {
        let prefix = "Long.parseLong(";
        let suffix = ")";
    
        const otherEntityRelationshipName = relationships[idx].otherEntityRelationshipName;
        const otherEntityRelationshipNamePlural = relationships[idx].otherEntityRelationshipNamePlural;
        const otherEntityIsEmbedded = relationships[idx].otherEntityIsEmbedded;
        const relationshipName = relationships[idx].relationshipName;
        const relationshipFieldName = relationships[idx].relationshipFieldName;
        const relationshipFieldNamePlural = relationships[idx].relationshipFieldNamePlural;
        const joinTableName = getJoinTableName(entityTableName, relationshipName, prodDatabaseType);
        const relationshipType = relationships[idx].relationshipType;
        const relationshipValidate = relationships[idx].relationshipValidate;
        const relationshipRequired = relationships[idx].relationshipRequired;
        const otherEntityNameCapitalized = relationships[idx].otherEntityNameCapitalized;
        const ownerSide = relationships[idx].ownerSide;
        const isUsingMapsId = relationships[idx].useJPADerivedIdentifier;
        if (otherEntityRelationshipName) {
            mappedBy = otherEntityRelationshipName.charAt(0).toLowerCase() + otherEntityRelationshipName.slice(1)
        }
        if (relationshipType === 'many-to-one' && relationshipRequired) {
            if (databaseType === 'sql') { _%>
		Long <%= relationshipName %>Id = null;
		if (columnsMap.containsKey("<%= relationshipName %>_id")) {
			<%= relationshipName %>Id = <%= prefix %>columnsMap.get("<%= relationshipName %>_id")<%= suffix %>;
		}
    <%_ } } } _%>

		<%= instanceType %> <%= instanceName %> = null;
		// +01) Search for existing <%= instanceName %> by <%= findByNames %>
		Optional<<%= instanceType %>> optional<%= instanceType %> = findOneBy<%= findByNames %>(<%= findByParameterNamesOnly %>);
		if (optional<%= instanceType %>.isPresent()) {
			<%= instanceName %> = optional<%= instanceType %>.get();
		} else {
			<%= instanceName %> = new <%= instanceType %>();
//			<%= instanceName %>.set<%= findByNames %>(<%= findByNames %>);
			// +02) Set default values
//			setDefaultValues(<%= instanceName %>);
		}

		// +03) Update <%= instanceName %>
<%_ for (idx2 in fields) {
      let fieldType2 = fields[idx2].fieldType;
      const fieldTypeBlobContent2 = fields[idx2].fieldTypeBlobContent;
      const fieldName2 = fields[idx2].fieldName;
      const fieldInJavaBeanMethod2 = fields[idx2].fieldInJavaBeanMethod;
      // SKIP IMAGE
      if ((fieldType2 === 'byte[]' || fieldType2 === 'ByteBuffer') && fieldTypeBlobContent2 === 'image') {
        continue;
      }
      _%>
		<%= instanceName %>.set<%= fieldInJavaBeanMethod2 %>(<%= fieldName2 %>);
<%_	}

	// @Trifon - iterate relationships
    for (idx in relationships) {
        let prefix = "Long.parseLong(";
        let suffix = ")";
    
        const otherEntityRelationshipName = relationships[idx].otherEntityRelationshipName;
        const otherEntityRelationshipNamePlural = relationships[idx].otherEntityRelationshipNamePlural;
        const otherEntityIsEmbedded = relationships[idx].otherEntityIsEmbedded;
        const relationshipName = relationships[idx].relationshipName;
        const relationshipNameCapitalized = relationships[idx].relationshipNameCapitalized;
        const relationshipFieldName = relationships[idx].relationshipFieldName;
        const relationshipFieldNamePlural = relationships[idx].relationshipFieldNamePlural;
        const joinTableName = getJoinTableName(entityTableName, relationshipName, prodDatabaseType);
        const relationshipType = relationships[idx].relationshipType;
        const relationshipValidate = relationships[idx].relationshipValidate;
        const relationshipRequired = relationships[idx].relationshipRequired;
        const otherEntityNameCapitalized = relationships[idx].otherEntityNameCapitalized;
        const ownerSide = relationships[idx].ownerSide;
        const isUsingMapsId = relationships[idx].useJPADerivedIdentifier;
        if (otherEntityRelationshipName) {
            mappedBy = otherEntityRelationshipName.charAt(0).toLowerCase() + otherEntityRelationshipName.slice(1)
        }
        if (relationshipType === 'many-to-one' && relationshipRequired) {
            if (databaseType === 'sql') { _%>
		<%= instanceName %>.set<%= relationshipNameCapitalized %>Id(<%= relationshipName %>Id);
    <%_ } } } _%>

		return <%= instanceName %>;
	}
    <%_ }
    }
    _%>
}
