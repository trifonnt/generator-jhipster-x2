<%#
 Copyright 2013-2018 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%><%
	//@Trifon - multi-unique
	multiUniqueFindByNames = function(multiUniqueConstraint) {
		const rels = multiUniqueConstraint.fields;
		let findByNames = "";
		let findByParameters = "";
		let uIdx = 0;
		for (uIdx = 0; uIdx <= rels.length - 1; ++uIdx) {
			let mUniqueColumnName = "";
			if (rels[uIdx].includes(":")) {
				mUniqueColumnName = rels[uIdx].split(":")[0] + "Id";
				findByParameters = findByParameters.concat("Long ").concat(mUniqueColumnName);
				if (uIdx != rels.length - 1) { findByParameters = findByParameters.concat(", "); }
			} else {
				mUniqueColumnName = rels[uIdx];
				findByParameters = findByParameters.concat("String ").concat(firstToLower(columnNameToJavaFieldName(mUniqueColumnName)));
				if (uIdx != rels.length - 1) { findByParameters = findByParameters.concat(", "); }
			}
			findByNames = findByNames.concat( columnNameToJavaFieldName(mUniqueColumnName) );
			if (uIdx != rels.length - 1) { findByNames = findByNames.concat("And"); }
		}
		return findByNames;
	}
	//@Trifon - multi-unique
	multiUniqueFindByParameters = function(multiUniqueConstraint) {
		const rels = multiUniqueConstraint.fields;
		let findByNames = "";
		let findByParameters = "";
		let uIdx = 0;
		for (uIdx = 0; uIdx <= rels.length - 1; ++uIdx) {
			let mUniqueColumnName = "";
			if (rels[uIdx].includes(":")) {
				mUniqueColumnName = rels[uIdx].split(":")[0] + "Id";
				findByParameters = findByParameters.concat("Long ").concat(mUniqueColumnName);
				if (uIdx != rels.length - 1) { findByParameters = findByParameters.concat(", "); }
			} else {
				mUniqueColumnName = rels[uIdx];
				findByParameters = findByParameters.concat("String ").concat(firstToLower(columnNameToJavaFieldName(mUniqueColumnName)));
				if (uIdx != rels.length - 1) { findByParameters = findByParameters.concat(", "); }
			}
			findByNames = findByNames.concat( columnNameToJavaFieldName(mUniqueColumnName) );
			if (uIdx != rels.length - 1) { findByNames = findByNames.concat("And"); }
		}
		return findByParameters;
	}
	//@Trifon - multi-unique
	multiUniqueFindByParameterNamesOnly = function(multiUniqueConstraint) {
		const rels = multiUniqueConstraint.fields;
		let findByParameters = "";
		let uIdx = 0;
		for (uIdx = 0; uIdx <= rels.length - 1; ++uIdx) {
			let mUniqueColumnName = "";
			if (rels[uIdx].includes(":")) {
				mUniqueColumnName = rels[uIdx].split(":")[0] + "Id";
				findByParameters = findByParameters.concat(mUniqueColumnName);
				if (uIdx != rels.length - 1) { findByParameters = findByParameters.concat(", "); }
			} else {
				mUniqueColumnName = rels[uIdx];
				findByParameters = findByParameters.concat(firstToLower(columnNameToJavaFieldName(mUniqueColumnName)));
				if (uIdx != rels.length - 1) { findByParameters = findByParameters.concat(", "); }
			}
		}
		return findByParameters;
	}
	//@Trifon - multi-unique
	multiUniqueFindByParameterNamesOnlyForLog = function(multiUniqueConstraint) {
		const rels = multiUniqueConstraint.fields;
		let findByParameters = "";
		let uIdx = 0;
		for (uIdx = 0; uIdx <= rels.length - 1; ++uIdx) {
			let mUniqueColumnName = "";
			if (rels[uIdx].includes(":")) {
				mUniqueColumnName = rels[uIdx].split(":")[0] + "Id";
				findByParameters = findByParameters.concat(mUniqueColumnName).concat(": {}");
				if (uIdx != rels.length - 1) { findByParameters = findByParameters.concat(", "); }
			} else {
				mUniqueColumnName = rels[uIdx];
				findByParameters = findByParameters.concat(firstToLower(columnNameToJavaFieldName(mUniqueColumnName))).concat(": {}");
				if (uIdx != rels.length - 1) { findByParameters = findByParameters.concat(", "); }
			}
		}
		return findByParameters;
	}
	//@Trifon - multi-unique
	multiUniqueFindByOtherEntity = function(multiUniqueConstraint, entityClass) {
		const rels = multiUniqueConstraint.fields;
		let findByParameters = "";
		let uIdx = 0;
		for (uIdx = 0; uIdx <= rels.length - 1; ++uIdx) {
			let mUniqueColumnName = "";
			if (rels[uIdx].includes(":")) {
				mUniqueColumnName = rels[uIdx].split(":")[0] + "";
				findByParameters = findByParameters.concat("param").concat(entityClass).concat(".get").concat(firstToUpper(mUniqueColumnName)).concat("().getId()");
				if (uIdx != rels.length - 1) { findByParameters = findByParameters.concat(", "); }
			} else {
				mUniqueColumnName = rels[uIdx];
				findByParameters = findByParameters.concat("param").concat(entityClass).concat(".get").concat(columnNameToJavaFieldName(mUniqueColumnName)).concat("()");
				if (uIdx != rels.length - 1) { findByParameters = findByParameters.concat(", "); }
			}
		}
		return findByParameters;
	}

	//@Trifon
	javaFieldNameToColumnName = function(fieldName) {
		let result = "";
		result = _.snakeCase(fieldName);
		return result;
	}

	//@Trifon
	columnNameToJavaFieldName = function(columnName) {
		let result = "";
		// Handle the specific case when the second letter is capitalized
		// See http://stackoverflow.com/questions/2948083/naming-convention-for-getters-setters-in-java
		if (columnName.length > 1) {
			const firstLetter = columnName.charAt(0);
			const secondLetter = columnName.charAt(1);
			if (firstLetter === firstLetter.toLowerCase() && secondLetter === secondLetter.toUpperCase()) {
				result = firstLetter.toLowerCase() + columnName.slice(1);
			} else {
				result = _.upperFirst(columnName);
			}
		} else {
			result = _.upperFirst(columnName);
		}
		
		// Convert _x to Upper case
		result = humanize(result);
		return result;
	}
	function humanize(str) {
		var i, frags = str.split('_');
		for (i=0; i<frags.length; i++) {
			frags[i] = frags[i].charAt(0).toUpperCase() + frags[i].slice(1);
		}
		return frags.join('');
	}
	//@Trifon
	toResourceUrlName = function(multiUniqueConstraint) {
//		var i; //, frags = str.split('_');
//		let result = "";
//		for (i=0; i<str.length; i++) {
//			if (str.charAt(i) === str.charAt(i).toUpperCase()) {
//				result = result.concat("-").concat(str.charAt(i).toLowerCase())
//			} else {
//				result = result.concat(str.charAt(i));
//			}
//		}
//		return result;

		const rels = multiUniqueConstraint.fields;
		let findByNames = "";
		let uIdx = 0;
		for (uIdx = 0; uIdx <= rels.length - 1; ++uIdx) {
			let mUniqueColumnName = "";
			if (rels[uIdx].includes(":")) {
				mUniqueColumnName = rels[uIdx].split(":")[0] + "Id";
			} else {
				mUniqueColumnName = rels[uIdx];
			}
			findByNames = findByNames.concat( firstToLower(columnNameToJavaFieldName(mUniqueColumnName)) );
			if (uIdx != rels.length - 1) { findByNames = findByNames.concat("-and-"); }
		}
		return findByNames;
	}

	//@Trifon - multi-unique
	// Returns true if entity contains multi-unique combination
	hasMultiUniqueConstraints = function(multiUniqueConstraints) {
		let hasMultiUnique = false;
		if (multiUniqueConstraints.length > 0) {
			hasMultiUnique = true;
		}
		return hasMultiUnique;
	}

	// Returns true if entity contains unique field.
	hasUniqueField = function(fields) {

	  let hasUniqField = false;

	  for (idx in fields) {
	    const field = fields[idx];

	    const fieldType = field.fieldType;
	    const fieldTypeBlobContent = field.fieldTypeBlobContent;
	    const fieldName = field.fieldName;
	    const fieldNameHumanized = field.fieldNameHumanized;
	    const fieldNameCapitalized = field.fieldNameCapitalized;
	    const fieldInJavaBeanMethod = field.fieldInJavaBeanMethod;

	    if (field.fieldValidate === true && field.fieldValidateRules.includes('unique')) {
	      return true;
	    }
	  }
	  return hasUniqField;
	}

	// Returns name of unique field.
	getNameOfUniqueField = function(fields, capitalLetter = false) {

	  let resultName = '';
//	  let hasUniqField = false;

	  for (idx in fields) {
	    const field = fields[idx];

	    const fieldType = field.fieldType;
	    const fieldTypeBlobContent = field.fieldTypeBlobContent;
	    const fieldName = field.fieldName;
	    const fieldNameHumanized = field.fieldNameHumanized;
	    const fieldNameCapitalized = field.fieldNameCapitalized;
	    const fieldInJavaBeanMethod = field.fieldInJavaBeanMethod;

	    if (field.fieldValidate === true && field.fieldValidateRules.includes('unique')) {
	      if (capitalLetter) {
	      	resultName = fieldNameCapitalized;
	      } else {
	      	resultName = fieldName;
	      }
	      return resultName;
//	      hasUniqField = true;
	    }
	  }
	  return resultName;
	}

	getRelationshipNamesForOtherEntityName = function(relationships, searchedEntityName) {
		return relationships
			.filter(relationship=>relationship.otherEntityName == searchedEntityName)
			.map(relationship=>relationship.relationshipName)
			.join(', ')
		;
	}
	
	toSpaced = function toSpaced(str) {
		str = str.replace(/([A-Z])/g," $1")
		return str.charAt(0).toUpperCase() + str.slice(1);
	}

	toDashed = function toDashed(str) {
	  return str.replace(/([a-zA-Z])(?=[A-Z])/g, '$1-').toLowerCase()
	}

	toLower = function toLower(str) {
		return str.toLowerCase();
	}

	addS = function addS(str) {
		return str+'s';
	}

	firstToUpper = function firstToUpper(str) {
		return str.charAt(0).toUpperCase() + str.slice(1);
	}

	firstToLower = function firstToLower(str) {
		return str.charAt(0).toLowerCase() + str.slice(1);
	}

	firstToUpper2 = function firstToUpper2(str) {
		// If SECOND Character is Upper case then first MUST also be Upper case
		if (str.charAt(1) == str.charAt(1).toUpperCase()) {
			return str.charAt(0).toUpperCase() + str.slice(1);
		}
		return str;
	}
%>