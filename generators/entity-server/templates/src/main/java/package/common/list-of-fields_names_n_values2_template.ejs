<%#
 Copyright 2013-2018 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%#	Returns a string of all fields, relationships and parameters. -%>
<%
  const fieldsArray = [];
  let result = '';

for (idx in fields) {
    const fieldType = fields[idx].fieldType;
    const fieldTypeBlobContent = fields[idx].fieldTypeBlobContent;
    const fieldName = fields[idx].fieldName;
    const fieldInJavaBeanMethod = fields[idx].fieldInJavaBeanMethod;
    const field = fields[idx];

    let methodPrefix = 'get';
    if (fieldType.toLowerCase() === 'boolean') {
      methodPrefix = 'is';
    }

    fieldsArray.push('.' + field.fieldName + '(builder.'+methodPrefix + field.fieldInJavaBeanMethod +'())');
}

for (idx in relationships) {
    const relationshipName = relationships[idx].relationshipName;
    const relationshipNameCapitalized = relationships[idx].relationshipNameCapitalized;
    const relationshipNameCapitalizedPlural = relationships[idx].relationshipNameCapitalizedPlural;
    const relationshipNameHumanized = relationships[idx].relationshipNameHumanized;
    const relationshipFieldName = relationships[idx].relationshipFieldName;
    const relationshipFieldNamePlural = relationships[idx].relationshipFieldNamePlural;
    const ownerSide = relationships[idx].ownerSide;
    const relationshipType = relationships[idx].relationshipType;
    const otherEntityName = relationships[idx].otherEntityName;
    const otherEntityNamePlural = relationships[idx].otherEntityNamePlural;
    const otherEntityNameCapitalized = relationships[idx].otherEntityNameCapitalized;
    const otherEntityField = relationships[idx].otherEntityField;
    const otherEntityFieldCapitalized = relationships[idx].otherEntityFieldCapitalized;
    const otherEntityStateName = relationships[idx].otherEntityStateName;
    const otherEntityRelationshipNameCapitalized = relationships[idx].otherEntityRelationshipNameCapitalized;
    const otherEntityRelationshipNameCapitalizedPlural = relationships[idx].otherEntityRelationshipNameCapitalizedPlural;
    if (
    	   (relationshipType === 'one-to-many')
    	|| (relationshipType === 'many-to-many')
    ) {
    	if (ownerSide === true) {
        	fieldsArray.push('.' + relationships[idx].relationshipFieldNamePlural + '(builder.get' + relationshipNameCapitalizedPlural + '())');
        }
    } else {
        fieldsArray.push('.' + relationships[idx].relationshipName + '(builder.get' + relationshipNameCapitalized + '())');
    }
}

    result = fieldsArray.join('\r\n							');
    result += '\r\n';
-%>
<%- result -%>