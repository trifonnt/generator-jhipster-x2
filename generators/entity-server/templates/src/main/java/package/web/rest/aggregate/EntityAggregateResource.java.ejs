<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%><%- include('../../../common/functions.ejs') -%>
package <%= packageName %>.web.rest.aggregate;

<%_
const viaService = service !== 'no';
let isUsingMapsId = false;
let mapsIdAssoc;
for (idx in relationships) {
    isUsingMapsId = relationships[idx].useJPADerivedIdentifier === true;
    if (isUsingMapsId) {
        mapsIdAssoc = relationships[idx];
        break;
    }
}
let parentEntityToUse = parentEntityLevel1;
if (parentEntityLevel2) {
	parentEntityToUse = parentEntityLevel2;
}

let manyToManyWithUser = false;
for (idx in relationships) {
    if (relationships[idx].otherEntityName === 'user' && relationships[idx].relationshipType === 'many-to-many') {
        manyToManyWithUser = true;
        break;
    }
}
_%>
<%_ if (dto !== 'mapstruct' || service === 'no') { _%>
import <%= packageName %>.domain.<%= asEntity(entityClass) %>;
<%_ } _%>
<%_ if (service !== 'no') { _%>
import <%= packageName %>.service.<%= entityClass %>Service;
import <%= packageName %>.service.<%= parentEntityLevel1 %>Service; //@Trifon-parent
<%_ if (parentEntityLevel2) { _%>
import <%= packageName %>.service.<%= parentEntityLevel2 %>Service; //@Trifon-parent
<%_ } _%>
<%_ if (parentEntityLevel3) { _%>
import <%= packageName %>.service.<%= parentEntityLevel3 %>Service; //@Trifon-parent
<%_ } _%>
import <%= packageName %>.service.<%= parentEntityLevel1 %>QueryService; //@Trifon-parent
import <%= packageName %>.security.SecurityUtils; //@Trifon
import <%= packageName %>.repository.<%= parentEntityLevel1 %>Repository; //@Trifon-parent
	<%_ if (templateFactory) { _%>
import <%= packageName %>.service.<%= entityClass %>TemplateService; //@Trifon
import <%= packageName %>.service.mapper.tmpl.<%= entityClass %>TmplMapper; //@Trifon
import <%= packageName %>.service.UserService; //@Trifon
import <%= packageName %>.domain.User; //@Trifon
	<%_ } _%>
<%_ } else { _%>
import <%= packageName %>.repository.<%= entityClass %>Repository;
    <%_ if (isUsingMapsId === true) { _%>
import <%= packageName %>.repository.<%= mapsIdAssoc.otherEntityNameCapitalized %>Repository;
    <%_ } _%>
    <%_ if (searchEngine === 'elasticsearch') { _%>
import <%= packageName %>.repository.search.<%= entityClass %>SearchRepository;
    <%_ } _%>
<%_ } _%>
<%_ if (saveUserSnapshot) { _%>
import <%= packageName %>.repository.UserRepository;
<%_ } _%>
import <%= packageName %>.web.rest.errors.BadRequestAlertException;
import <%= packageName %>.web.rest.errors.EntityNotFoundException; //@Trifon
import <%= packageName %>.web.rest.common.JsonPatcher; //@Trifon
import <%= packageName %>.web.rest.common.RestMediaType; //@Trifon
import <%= packageName %>.web.rest.<%= entityClass %>Resource; //@Trifon
<%_ if (parentEntityLevel2) { _%>
import <%= packageName %>.web.rest.<%= parentEntityLevel1 %>Resource; //@Trifon-parent
import <%= packageName %>.web.rest.<%= parentEntityLevel2 %>Resource; //@Trifon-parent
<%_ } _%>
<%_ if (parentEntityLevel3) { _%>
import <%= packageName %>.web.rest.<%= parentEntityLevel3 %>Resource; //@Trifon-parent
<%_ } _%>

//import <%= packageName %>.service.dto.IdArrayDTO; //@Trifon
<%_ for (idx in relationships) {
        // @Trifon - relationship with Image entity
        const otherEntityRelationshipName = relationships[idx].otherEntityRelationshipName;
        const otherEntityRelationshipNamePlural = relationships[idx].otherEntityRelationshipNamePlural;
        const relationshipName = relationships[idx].relationshipName;
        const relationshipNamePlural = relationships[idx].relationshipNamePlural;
        const relationshipFieldName = relationships[idx].relationshipFieldName;
        const relationshipFieldNamePlural = relationships[idx].relationshipFieldNamePlural;
        const joinTableName = getJoinTableName(name, relationshipName, prodDatabaseType);
        const relationshipType = relationships[idx].relationshipType;
        const relationshipValidate = relationships[idx].relationshipValidate;
        const relationshipRequired = relationships[idx].relationshipRequired;
        const otherEntityName = relationships[idx].otherEntityName;
        const otherEntityNameCapitalized = relationships[idx].otherEntityNameCapitalized;
        const ownerSide = relationships[idx].ownerSide;
    if (relationshipType === 'one-to-many' && otherEntityName === 'image') { _%>
import <%=packageName%>.service.ImageService; //@Trifon
<%_ } } _%>
import com.github.fge.jsonpatch.JsonPatchException; //@Trifon
import io.swagger.annotations.Api; //@Trifon
<%_ if (dto === 'mapstruct') { _%>
import <%= packageName %>.service.dto.*; //@Trifon
import <%= packageName %>.service.dto.<%= asDto(entityClass) %>;
    <%_ if (service === 'no') { _%>
import <%= packageName %>.service.mapper.<%= entityClass %>Mapper;
    <%_ } _%>
<%_ } _%>
<%_ if (jpaMetamodelFiltering) {  _%>
import <%= packageName %>.service.dto.<%= entityClass %>Criteria;
import <%= packageName %>.service.<%= entityClass %>QueryService;
<%_ } _%>
<%_ if (requiredRoleForCreate || requiredRoleForRead || requiredRoleForUpdate || requiredRoleForDelete) { _%>
import <%= packageName %>.security.AuthoritiesConstants; //@Trifon
<%_ } _%>

import io.github.jhipster.web.util.HeaderUtil;
import io.github.jhipster.web.util.PaginationUtil;
<%_ if (pagination !== 'no') { _%>
//import io.github.jhipster.web.util.PaginationUtil;
<%_ } _%>
//import io.github.jhipster.web.util.<% if (reactive) { %>reactive.<% } %>ResponseUtil;
import io.github.jhipster.service.filter.LongFilter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
<%_ if (pagination !== 'no') { _%>
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
    <%_ if (reactive) { _%>
import org.springframework.data.domain.PageImpl;
    <%_ } _%>
import org.springframework.http.HttpHeaders;
//import org.springframework.http.HttpStatus;
    <%_ if (reactive) { _%>
import org.springframework.http.server.reactive.ServerHttpRequest;
    <%_ } _%>
    <%_ if (!reactive) { _%>
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
    <%_ } else { _%>
import org.springframework.web.util.UriComponentsBuilder;
    <%_ } _%>
<%_ } else if (reactiveRepositories) { _%>
import org.springframework.http.HttpStatus;
<%_ } _%>
<%_ if (reactiveRepositories) { _%>
import org.springframework.http.MediaType;
<%_ } _%>
import org.springframework.http.MediaType; //@Trifon
import org.springframework.http.ResponseEntity;
import org.springframework.beans.factory.annotation.Autowired; //@Trifon
<%_ if (requiredRoleForCreate || requiredRoleForRead || requiredRoleForUpdate || requiredRoleForDelete) { _%>
import org.springframework.security.access.prepost.PreAuthorize; //@Trifon
<%_ } _%>
//import org.springframework.web.multipart.MultipartFile; //@Trifon
import org.springframework.validation.BindingResult; //@Trifon
<%_ if (!viaService && !saveUserSnapshot) { _%>
import org.springframework.transaction.annotation.Transactional;
<%_ } _%>
import org.springframework.web.bind.annotation.*;
//import java.io.BufferedReader; //@Trifon
//import java.io.InputStreamReader; //@Trifon
//import java.io.IOException; //@Trifon
<%_ if (reactiveRepositories) { _%>
import org.springframework.web.server.ResponseStatusException;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
<%_ } _%>

<%_ if (validation || !validation) { _%>
import javax.validation.Valid; //@Trifon
<%_ } _%>
import java.net.URI;
import java.net.URISyntaxException;
<%_ if (pagination === 'no' && dto === 'mapstruct' && !viaService && fieldsContainNoOwnerOneToOne === true) { _%>
import java.util.LinkedList;
<%_ } _%>
<%_ if (pagination !== 'no' && reactive) { _%>
import java.util.ArrayList;
<%_ } _%>
//import java.util.Map; //@Trifon
import java.util.List;
<%_ if (isUsingMapsId === true) { _%>
import java.util.Objects;
<%_ } _%>
//import java.util.Optional;
<%_ if (databaseType === 'cassandra') { _%>
import java.util.UUID;
<%_ } _%>
<%_ if ((searchEngine !== false && !reactive) || fieldsContainNoOwnerOneToOne === true) { _%>
    <%_ if (!viaService) { _%>
import java.util.stream.Collectors;
    <%_ } _%>
import java.util.stream.StreamSupport;
<%_ } _%>
<%_ if (searchEngine === 'elasticsearch' && !reactive) { _%>

import static org.elasticsearch.index.query.QueryBuilders.*;
<%_ } _%>

@RestController
@RequestMapping("/api")
<%_ if (databaseType === 'sql' && !viaService && !saveUserSnapshot) { _%>
@Transactional
<%_ } _%>
@Api(tags={"<%= parentEntityNamePluralizedAndSpinalCased %>"})
public class <%= parentEntityLevel1 %><%= entityClass %>AggResource {

	private final Logger log = LoggerFactory.getLogger(<%= parentEntityLevel1 %><%= entityClass %>AggResource.class);

<%_ if (templateFactory) { _%>
	@Autowired
	private UserService userService; //@Trifon
	@Autowired
	private <%= entityClass %>TemplateService <%= entityInstance %>TemplateService; //@Trifon
	@Autowired
	private <%= entityClass %>TmplMapper <%= entityInstance %>TmplMapper; //@Trifon
<%_ } _%>
	@Autowired
	private JsonPatcher jsonPatcher;
<%_ for (idx in relationships) {
		// @Trifon - relationship with Image entity
		const otherEntityRelationshipName = relationships[idx].otherEntityRelationshipName;
		const otherEntityRelationshipNamePlural = relationships[idx].otherEntityRelationshipNamePlural;
		const relationshipName = relationships[idx].relationshipName;
		const relationshipNamePlural = relationships[idx].relationshipNamePlural;
		const relationshipFieldName = relationships[idx].relationshipFieldName;
		const relationshipFieldNamePlural = relationships[idx].relationshipFieldNamePlural;
		const joinTableName = getJoinTableName(name, relationshipName, prodDatabaseType);
		const relationshipType = relationships[idx].relationshipType;
		const relationshipValidate = relationships[idx].relationshipValidate;
		const relationshipRequired = relationships[idx].relationshipRequired;
		const otherEntityName = relationships[idx].otherEntityName;
		const otherEntityNameCapitalized = relationships[idx].otherEntityNameCapitalized;
		const ownerSide = relationships[idx].ownerSide;
	if (relationshipType === 'one-to-many' && otherEntityName === 'image') { _%>
	@Autowired
	private ImageService imageService; //@Trifon
<%_ } } _%>
<%_ if (!readOnly) { _%>

	<%_ let entityName = entityInstance;
	if (clientRootFolder && !skipUiGrouping) {
		entityName = _.camelCase(`${clientRootFolder}${entityClass}`);
	} _%>
	@Value("${jhipster.clientApp.name}")
	private String applicationName;

<%_ } _%>
	@SuppressWarnings("unused")
	@Autowired
	private <%= parentEntityLevel1 %>Repository <%= firstToLower(parentEntityLevel1) %>Repository;
	@Autowired
	private <%= parentEntityLevel1 %>Service <%= firstToLower(parentEntityLevel1) %>Service;
	@SuppressWarnings("unused")
	@Autowired
	private <%= parentEntityLevel1 %>QueryService <%= firstToLower(parentEntityLevel1) %>QueryService;
//	@SuppressWarnings("unused")
//	@Autowired
//	private <%= parentEntityLevel1 %>Facade <%= firstToLower(parentEntityLevel1) %>Facade;

<%_ if (parentEntityLevel2) { _%>
	@Autowired
	private <%= parentEntityLevel2 %>Service <%= firstToLower(parentEntityLevel2) %>Service;
<%_ } _%>
	<%_
	const instanceType = (dto === 'mapstruct') ? asDto(entityClass) : asEntity(entityClass);
	const instanceName = (dto === 'mapstruct') ? asDto(entityInstance) : asEntity(entityInstance);
	const mapper = entityInstance  + 'Mapper';
	const entityToDtoReference = mapper + '::' + 'toDto';
	_%><%- include('../../../common/inject_template', {viaService: viaService, constructorName: parentEntityLevel1 + entityClass + 'AggResource', queryService: jpaMetamodelFiltering, isUsingMapsId: isUsingMapsId, mapsIdAssoc: mapsIdAssoc, isController: true}); -%>

	/**
	 * {@code GET  /<%= parentEntityNamePluralizedAndSpinalCased %>/{id}/<%= entityApiUrl %>} : get all <%= entityInstancePlural %>.
	 *
	<%_ if (pagination !== 'no') { _%>
	 * @param pageable the pagination information.
	    <%_ if (reactive) { _%>
	 * @param request a {@link ServerHttpRequest} request.
	    <%_ } _%>
	<%_ } _%>
	<%_ if (!jpaMetamodelFiltering && fieldsContainOwnerManyToMany) { _%>
	 * @param eagerload flag to eager load entities from relationships (This is applicable for many-to-many).
	 <%_ } _%>
	 <%_ if (jpaMetamodelFiltering) { _%>
	 * @param criteria the criteria which the requested entities should match.
	 <%_ } else if (fieldsContainNoOwnerOneToOne) { _%>
	 * @param filter the filter of the request.
	 <%_ } _%>
	 * @return the {@link ResponseEntity} with status {@code 200 (OK)} and the list of <%= entityInstancePlural %> in body.
	 */
	@GetMapping("/<%= parentEntityNamePluralizedAndSpinalCased %>/{id}/<%= entityApiUrl %>")
	<%_ if (databaseType === 'sql' && isUsingMapsId === true && !viaService) { _%>
	@Transactional(readOnly = true)
	<%_ } _%>
	<%_ if (requiredRoleForRead) { _%>
	@PreAuthorize("hasAuthority(\"" + AuthoritiesConstants.<%= requiredRoleForRead %> + "\")")
	<%_ } _%>
	public ResponseEntity<List<<%= entityClass %>DTO>> get<%= parentEntityLevel1 %><%= entityClassPlural %>(@PathVariable(name = "id") Long <%= firstToLower(parentEntityLevel1) %>Id, <%= entityClass %>Criteria <%= firstToLower(entityClass) %>Criteria, BindingResult result, Pageable pageable) { //Works only if BindingResult is used!!!
		log.debug("REST request to get <%= entityClassPlural %> for <%= firstToLower(parentEntityLevel1) %>Id: {}", <%= firstToLower(parentEntityLevel1) %>Id);

		<%= parentEntityLevel1 %>DTO <%= firstToLower(parentEntityLevel1) %>DTO = <%= firstToLower(parentEntityLevel1) %>Service.findOne(<%= firstToLower(parentEntityLevel1) %>Id).orElseThrow(() -> new EntityNotFoundException(<%= parentEntityLevel1 %>Resource.ENTITY_NAME, <%= firstToLower(parentEntityLevel1) %>Id));

		LongFilter longFilter = new LongFilter();
		longFilter.setEquals(<%= firstToLower(parentEntityLevel1) %>DTO.getId());
		<%= firstToLower(entityClass) %>Criteria.set<%= parentEntityLevel1 %>Id(longFilter);

//		BooleanFilter activeFilter = new BooleanFilter();
//		activeFilter.setEquals(Boolean.TRUE);
//		<%= firstToLower(entityClass) %>Criteria.setActive(activeFilter);

		Page<<%= entityClass %>DTO> <%= entityInstancePlural %>Page = <%= firstToLower(entityClass) %>QueryService.findByCriteria(<%= firstToLower(entityClass) %>Criteria, pageable);

		HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(ServletUriComponentsBuilder.fromCurrentRequest(), <%= entityInstancePlural %>Page);
		return ResponseEntity.ok().headers(headers).body(<%= entityInstancePlural %>Page.getContent());
	}

	@GetMapping("/<%= parentEntityNamePluralizedAndSpinalCased %>/{id}/<%= entityApiUrl %>/count")
	public ResponseEntity<Long> count<%= parentEntityLevel1 %><%= entityClassPlural %>(@PathVariable(name = "id") Long <%= firstToLower(parentEntityLevel1) %>Id, <%= entityClass %>Criteria <%= firstToLower(entityClass) %>Criteria, BindingResult result) {
		log.debug("REST request to count <%= entityClassPlural %> for <%= firstToLower(parentEntityLevel1) %>Id: {} by criteria: {}", <%= firstToLower(parentEntityLevel1) %>Id, <%= firstToLower(entityClass) %>Criteria);

		<%= parentEntityLevel1 %>DTO <%= firstToLower(parentEntityLevel1) %>DTO = <%= firstToLower(parentEntityLevel1) %>Service.findOne(<%= firstToLower(parentEntityLevel1) %>Id).orElseThrow(() -> new EntityNotFoundException(<%= parentEntityLevel1 %>Resource.ENTITY_NAME, <%= firstToLower(parentEntityLevel1) %>Id));

		LongFilter longFilter = new LongFilter();
		longFilter.setEquals(<%= firstToLower(parentEntityLevel1) %>DTO.getId());
		<%= firstToLower(entityClass) %>Criteria.set<%= parentEntityLevel1 %>Id(longFilter);

		return ResponseEntity.ok().body(<%= firstToLower(entityClass) %>QueryService.countByCriteria(<%= firstToLower(entityClass) %>Criteria));
	}

<%_ if (!readOnly) { _%>
	/**
	 * {@code POST  /<%= parentEntityNamePluralizedAndSpinalCased %>/{id}/<%= entityApiUrl %>} : Create a new <%= entityInstance %>.
	 *
	 * @param <%= instanceName %> the <%= instanceName %> to create.
	 * @return the {@link ResponseEntity} with status {@code 201 (Created)} and with body the new <%= instanceName %>, or with status {@code 400 (Bad Request)} if the <%= entityInstance %> has already an ID.
	 * @throws URISyntaxException if the Location URI syntax is incorrect.
	 */
	@PostMapping("/<%= parentEntityNamePluralizedAndSpinalCased %>/{id}/<%= entityApiUrl %>")
	public ResponseEntity<<%= entityClass %>DTO> create<%= parentEntityLevel1 %><%= entityClass %>(@PathVariable(name = "id") Long <%= firstToLower(parentEntityLevel1) %>Id, @Valid @RequestBody <%= entityClass %>DTO <%= firstToLower(entityClass) %>DTO) throws URISyntaxException {
		log.debug("REST request to save <%= entityClass %> for <%= firstToLower(parentEntityLevel1) %>Id: {}, <%= firstToLower(entityClass) %>DTO: {}", <%= firstToLower(parentEntityLevel1) %>Id, <%= firstToLower(entityClass) %>DTO);
		if (<%= firstToLower(entityClass) %>DTO.getId() != null) {
			throw new BadRequestAlertException("A new <%= entityClass %> cannot already have an ID", <%= entityClass %>Resource.ENTITY_NAME, "idexists");
		}

		<%= parentEntityLevel1 %>DTO <%= firstToLower(parentEntityLevel1) %>DTO = <%= firstToLower(parentEntityLevel1) %>Service.findOne(<%= firstToLower(parentEntityLevel1) %>Id).orElseThrow(() -> new EntityNotFoundException(<%= parentEntityLevel1 %>Resource.ENTITY_NAME, <%= firstToLower(parentEntityLevel1) %>Id));
<%_ if (parentEntityLevel2) { _%>

		<%= parentEntityLevel2 %>DTO <%= firstToLower(parentEntityLevel2) %>DTO = <%= firstToLower(parentEntityLevel2) %>Service.findOne(<%= firstToLower(parentEntityLevel1) %>DTO.get<%= parentEntityLevel2 %>Id()).orElseThrow(() -> new EntityNotFoundException(<%= parentEntityLevel2 %>Resource.ENTITY_NAME, <%= firstToLower(parentEntityLevel1) %>DTO.get<%= parentEntityLevel2 %>Id()));
<%_ } _%>
		//Check is currently logged-in user is the same as <%= firstToLower(parentEntityToUse) %>.owner!!!
		if (<%= firstToLower(parentEntityToUse) %>DTO.get<%= securityLinkColumn %>() == null || <%= firstToLower(parentEntityToUse) %>DTO.get<%= securityLinkColumn %>().isEmpty() || !<%= firstToLower(parentEntityToUse) %>DTO.get<%= securityLinkColumn %>().equals(SecurityUtils.getCurrentUserLogin().get())) {
			throw new EntityNotFoundException(<%= parentEntityToUse %>Resource.ENTITY_NAME, <%= firstToLower(parentEntityLevel1) %>DTO.get<%= parentEntityLevel2 %>Id());
		}
		// Override <%= firstToLower(parentEntityLevel1) %>Id if any is send in the request!
		<%= firstToLower(entityClass) %>DTO.set<%= parentEntityLevel1 %>Id(<%= firstToLower(parentEntityLevel1) %>DTO.getId());
		<%= firstToLower(entityClass) %>DTO.set<%= parentEntityLevel1 %>Code(<%= firstToLower(parentEntityLevel1) %>DTO.getCode());

		<%= entityClass %>DTO result = <%= firstToLower(entityClass) %>Service.save(<%= firstToLower(entityClass) %>DTO);
		HttpHeaders headers = null;
//		headers = HeaderUtil.createHiddenFieldsHeader("<%= firstToLower(parentEntityLevel1) %>Id");
		headers = HeaderUtil.createEntityCreationAlert(applicationName, true, <%= entityClass %>Resource.ENTITY_NAME, result.getId().toString());

		return ResponseEntity.created(new URI("/api/<%= parentEntityNamePluralizedAndSpinalCased %>/" + <%= firstToLower(parentEntityLevel1) %>Id + "/<%= entityApiUrl %>/" + result.getId()))
			.headers(headers)
			.body(result);
	}

	/**
	 * {@code PUT  /<%= entityApiUrl %>} : Updates an existing <%= entityInstance %>.
	 *
	 * @param <%= instanceName %> the <%= instanceName %> to update.
	 * @return the {@link ResponseEntity} with status {@code 200 (OK)} and with body the updated <%= instanceName %>,
	 * or with status {@code 400 (Bad Request)} if the <%= instanceName %> is not valid,
	 * or with status {@code 500 (Internal Server Error)} if the <%= instanceName %> couldn't be updated.
	 * @throws URISyntaxException if the Location URI syntax is incorrect.
	 */
	@PutMapping("/<%= parentEntityNamePluralizedAndSpinalCased %>/{id}/<%= entityApiUrl %>/{<%= firstToLower(entityClass) %>Id}")
	public ResponseEntity<<%= entityClass %>DTO> update<%= parentEntityLevel1 %><%= entityClass %>(@PathVariable(name = "id") Long <%= firstToLower(parentEntityLevel1) %>Id, @PathVariable(name = "<%= firstToLower(entityClass) %>Id") Long <%= firstToLower(entityClass) %>Id, @Valid @RequestBody <%= entityClass %>DTO <%= firstToLower(entityClass) %>DTO) throws URISyntaxException {
		log.debug("REST request to update <%= entityClass %> for <%= firstToLower(parentEntityLevel1) %>Id: {}, <%= firstToLower(entityClass) %>DTO: {}", <%= firstToLower(parentEntityLevel1) %>Id, <%= firstToLower(entityClass) %>DTO);
		if (<%= firstToLower(entityClass) %>DTO.get<%= parentEntityLevel1 %>Id() == null || <%= firstToLower(entityClass) %>DTO.getId() == null || !<%= firstToLower(entityClass) %>DTO.getId().equals(<%= firstToLower(entityClass) %>Id)) {
			throw new BadRequestAlertException("Invalid id", <%= entityClass %>Resource.ENTITY_NAME, "idnull");
		}

		<%= parentEntityLevel1 %>DTO <%= firstToLower(parentEntityLevel1) %>DTO = <%= firstToLower(parentEntityLevel1) %>Service.findOne(<%= firstToLower(parentEntityLevel1) %>Id).orElseThrow(() -> new EntityNotFoundException(<%= parentEntityLevel1 %>Resource.ENTITY_NAME, <%= firstToLower(parentEntityLevel1) %>Id));
<%_ if (parentEntityLevel2) { _%>

		<%= parentEntityLevel2 %>DTO <%= firstToLower(parentEntityLevel2) %>DTO = <%= firstToLower(parentEntityLevel2) %>Service.findOne(<%= firstToLower(parentEntityLevel1) %>DTO.get<%= parentEntityLevel2 %>Id()).orElseThrow(() -> new EntityNotFoundException(<%= parentEntityLevel2 %>Resource.ENTITY_NAME, <%= firstToLower(parentEntityLevel1) %>DTO.get<%= parentEntityLevel2 %>Id()));
<%_ } _%>
		//Check is currently logged-in user is the same as <%= firstToLower(parentEntityToUse) %>.owner!!!
		if (<%= firstToLower(parentEntityToUse) %>DTO.get<%= securityLinkColumn %>() == null || <%= firstToLower(parentEntityToUse) %>DTO.get<%= securityLinkColumn %>().isEmpty() || !<%= firstToLower(parentEntityToUse) %>DTO.get<%= securityLinkColumn %>().equals(SecurityUtils.getCurrentUserLogin().get())) {
			throw new EntityNotFoundException(<%= parentEntityLevel2 %>Resource.ENTITY_NAME, <%= firstToLower(parentEntityLevel1) %>DTO.get<%= parentEntityLevel2 %>Id());
		}
		// Override <%= firstToLower(parentEntityLevel1) %>Id if any is send in the request!
		<%= firstToLower(entityClass) %>DTO.set<%= parentEntityLevel1 %>Id(<%= firstToLower(parentEntityLevel1) %>DTO.getId());
		<%= firstToLower(entityClass) %>DTO.set<%= parentEntityLevel1 %>Code(<%= firstToLower(parentEntityLevel1) %>DTO.getCode());

		<%= entityClass %>DTO result = <%= firstToLower(entityClass) %>Service.save(<%= firstToLower(entityClass) %>DTO);
		HttpHeaders headers = null;
//		headers = HeaderUtil.createHiddenFieldsHeader("<%= firstToLower(parentEntityLevel1) %>Id");
		headers = HeaderUtil.createEntityUpdateAlert(applicationName, true, <%= entityClass %>Resource.ENTITY_NAME, result.getId().toString());

		return ResponseEntity.ok()
			.headers(headers)
			.body(result);
	}

	// @Trifon
	// JSON PATCH - V3
	// echo '[{ "op": "replace", "path": "/description", "value": "Patched Description" }]' | http PATCH :10000/api/<%= parentEntityNamePluralizedAndSpinalCased %>/1/<%= entityApiUrl %>/2 Content-Type:application/json-patch+json
	/**
	 * PATCH  /<%= parentEntityNamePluralizedAndSpinalCased %>/:id/<%= entityApiUrl %>/:<%= firstToLower(entityClass) %>Id : Patches an existing <%= entityClass %> of <%= parentEntityLevel1 %>.
	 *
	 * @param <%= firstToLower(entityClass) %>DTO the <%= firstToLower(entityClass) %>DTO to update
	 * @return the ResponseEntity with status 200 (OK) and with body the updated <%= firstToLower(entityClass) %>DTO,
	 * or with status 400 (Bad Request) if the <%= firstToLower(entityClass) %>DTO is not valid,
	 * or with status 500 (Internal Server Error) if the <%= firstToLower(entityClass) %>DTO couldn't be updated
	 * @throws URISyntaxException if the Location URI syntax is incorrect
	 */
	@PatchMapping(value = "/<%= parentEntityNamePluralizedAndSpinalCased %>/{id}/<%= entityApiUrl %>/{<%= firstToLower(entityClass) %>Id}", 
		consumes = RestMediaType.APPLICATION_PATCH_JSON_VALUE,
		produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<<%= entityClass %>DTO> partialUpdate<%= parentEntityLevel1 %><%= entityClass %>(@PathVariable(name = "id") Long <%= firstToLower(parentEntityLevel1) %>Id, @PathVariable(name = "<%= firstToLower(entityClass) %>Id") Long <%= firstToLower(entityClass) %>Id, @RequestBody String patchCommand) {
		log.debug("REST request to PATCH <%= entityClass %>, <%= firstToLower(entityClass) %>Id: {} for <%= firstToLower(parentEntityLevel1) %>Id: {}", <%= firstToLower(entityClass) %>Id, <%= firstToLower(parentEntityLevel1) %>Id);

		<%= parentEntityLevel1 %>DTO <%= firstToLower(parentEntityLevel1) %>DTO = <%= firstToLower(parentEntityLevel1) %>Service.findOne(<%= firstToLower(parentEntityLevel1) %>Id).orElseThrow(() -> new EntityNotFoundException(<%= parentEntityLevel1 %>Resource.ENTITY_NAME, <%= firstToLower(parentEntityLevel1) %>Id));
<%_ if (parentEntityLevel2) { _%>

		<%= parentEntityLevel2 %>DTO <%= firstToLower(parentEntityLevel2) %>DTO = <%= firstToLower(parentEntityLevel2) %>Service.findOne(<%= firstToLower(parentEntityLevel1) %>DTO.get<%= parentEntityLevel2 %>Id()).orElseThrow(() -> new EntityNotFoundException(<%= parentEntityLevel1 %>Resource.ENTITY_NAME, <%= firstToLower(parentEntityLevel1) %>DTO.get<%= parentEntityLevel2 %>Id()));
<%_ } _%>
		//Check is currently logged-in user is the same as <%= firstToLower(parentEntityToUse) %>.owner!!!
		if (<%= firstToLower(parentEntityToUse) %>DTO.get<%= securityLinkColumn %>() == null || <%= firstToLower(parentEntityToUse) %>DTO.get<%= securityLinkColumn %>().isEmpty() || !<%= firstToLower(parentEntityToUse) %>DTO.get<%= securityLinkColumn %>().equals(SecurityUtils.getCurrentUserLogin().get())) {
			throw new EntityNotFoundException(<%= parentEntityLevel1 %>Resource.ENTITY_NAME, <%= firstToLower(parentEntityLevel1) %>DTO.get<%= parentEntityLevel2 %>Id());
		}

		<%= entityClass %>DTO existing<%= entityClass %>DTO = <%= firstToLower(entityClass) %>Service.findOne(<%= firstToLower(entityClass) %>Id).orElseThrow(() -> new EntityNotFoundException(<%= parentEntityLevel1 %>Resource.ENTITY_NAME, <%= firstToLower(parentEntityLevel1) %>Id));
		if (!existing<%= entityClass %>DTO.get<%= parentEntityLevel1 %>Id().equals(<%= firstToLower(parentEntityLevel1) %>DTO.getId())) {
			throw new EntityNotFoundException();
		}
		<%= entityClass %>DTO <%= firstToLower(entityClass) %>DTO = null;
		try {
			<%= firstToLower(entityClass) %>DTO = (<%= entityClass %>DTO)jsonPatcher.patch(patchCommand, existing<%= entityClass %>DTO).get();
		} catch (RuntimeException ex) {
			if (JsonPatchException.class.isAssignableFrom(ex.getCause().getClass())) {
				log.debug(ex.getMessage());
			}
		}

		// Override <%= firstToLower(parentEntityLevel1) %>Id if any is send in the request!
		<%= firstToLower(entityClass) %>DTO.set<%= parentEntityLevel1 %>Id(<%= firstToLower(parentEntityLevel1) %>DTO.getId());
		<%= firstToLower(entityClass) %>DTO.set<%= parentEntityLevel1 %>Code(<%= firstToLower(parentEntityLevel1) %>DTO.getCode());

		<%= entityClass %>DTO result = <%= firstToLower(entityClass) %>Service.save(<%= firstToLower(entityClass) %>DTO);
		HttpHeaders headers = null;
//		headers = HeaderUtil.createHiddenFieldsHeader("<%= firstToLower(parentEntityLevel1) %>Id");
		headers = HeaderUtil.createEntityUpdateAlert(applicationName, true, <%= entityClass %>Resource.ENTITY_NAME, result.getId().toString());

		return ResponseEntity.ok()
			.headers(headers)
			.body(result);
	}

	@DeleteMapping("/<%= parentEntityNamePluralizedAndSpinalCased %>/{id}/<%= entityApiUrl %>/{<%= firstToLower(entityClass) %>Id}")
	public ResponseEntity<Void> delete<%= parentEntityLevel1 %><%= entityClass %>(@PathVariable(name = "id") Long <%= firstToLower(parentEntityLevel1) %>Id, @PathVariable(name = "<%= firstToLower(entityClass) %>Id") Long <%= firstToLower(entityClass) %>Id) throws URISyntaxException {
		log.debug("REST request to delete <%= entityClass %> for <%= firstToLower(parentEntityLevel1) %>Id: {}, <%= firstToLower(entityClass) %>Id: {}", <%= firstToLower(parentEntityLevel1) %>Id, <%= firstToLower(entityClass) %>Id);

		<%= parentEntityLevel1 %>DTO <%= firstToLower(parentEntityLevel1) %>DTO = <%= firstToLower(parentEntityLevel1) %>Service.findOne(<%= firstToLower(parentEntityLevel1) %>Id).orElseThrow(() -> new EntityNotFoundException(<%= parentEntityLevel1 %>Resource.ENTITY_NAME, <%= firstToLower(parentEntityLevel1) %>Id));
<%_ if (parentEntityLevel2) { _%>

		<%= parentEntityLevel2 %>DTO <%= firstToLower(parentEntityLevel2) %>DTO = <%= firstToLower(parentEntityLevel2) %>Service.findOne(<%= firstToLower(parentEntityLevel1) %>DTO.get<%= parentEntityLevel2 %>Id()).orElseThrow(() -> new EntityNotFoundException(<%= parentEntityLevel1 %>Resource.ENTITY_NAME, <%= firstToLower(parentEntityLevel1) %>DTO.get<%= parentEntityLevel2 %>Id()));
<%_ } _%>
		//Check is currently logged-in user is the same as <%= firstToLower(parentEntityToUse) %>.owner!!!
		if (<%= firstToLower(parentEntityToUse) %>DTO.get<%= securityLinkColumn %>() == null || <%= firstToLower(parentEntityToUse) %>DTO.get<%= securityLinkColumn %>().isEmpty() || !<%= firstToLower(parentEntityToUse) %>DTO.get<%= securityLinkColumn %>().equals(SecurityUtils.getCurrentUserLogin().get())) {
			throw new EntityNotFoundException();
		}
		<%= entityClass %>DTO <%= firstToLower(entityClass) %>DTO = <%= firstToLower(entityClass) %>Service.findOne(<%= firstToLower(entityClass) %>Id).orElseThrow(() -> new EntityNotFoundException());
		if (!<%= firstToLower(entityClass) %>DTO.get<%= parentEntityLevel1 %>Id().equals(<%= firstToLower(parentEntityLevel1) %>DTO.getId())) {
			throw new EntityNotFoundException();
		}
		<%= firstToLower(entityClass) %>Service.delete(<%= firstToLower(entityClass) %>DTO.getId());

		return ResponseEntity.noContent().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, <%= entityClass %>Resource.ENTITY_NAME, <%= firstToLower(entityClass) %>Id.toString())).build();
	}
<%_ } // end - (!readOnly) _%>

	@GetMapping("/<%= parentEntityNamePluralizedAndSpinalCased %>/{id}/<%= entityApiUrl %>/{<%= firstToLower(entityClass) %>Id}")
	public ResponseEntity<<%= entityClass %>DTO> get<%= parentEntityLevel1 %><%= entityClass %>(@PathVariable(name = "id") Long <%= firstToLower(parentEntityLevel1) %>Id, @PathVariable(name = "<%= firstToLower(entityClass) %>Id") Long <%= firstToLower(entityClass) %>Id) throws URISyntaxException {
		log.debug("REST request to get <%= entityClass %> for <%= firstToLower(parentEntityLevel1) %>Id: {}, <%= firstToLower(entityClass) %>Id: {}", <%= firstToLower(parentEntityLevel1) %>Id, <%= firstToLower(entityClass) %>Id);

		<%= parentEntityLevel1 %>DTO <%= firstToLower(parentEntityLevel1) %>DTO = <%= firstToLower(parentEntityLevel1) %>Service.findOne(<%= firstToLower(parentEntityLevel1) %>Id).orElseThrow(() -> new EntityNotFoundException(<%= parentEntityLevel1 %>Resource.ENTITY_NAME, <%= firstToLower(parentEntityLevel1) %>Id));
<%_ if (parentEntityLevel2) { _%>

//		<%= parentEntityLevel2 %>DTO <%= firstToLower(parentEntityLevel2) %>DTO = <%= firstToLower(parentEntityLevel2) %>Service.findOne(<%= firstToLower(parentEntityLevel1) %>DTO.get<%= parentEntityLevel2 %>Id()).orElseThrow(() -> new EntityNotFoundException(<%= parentEntityLevel1 %>Resource.ENTITY_NAME, <%= firstToLower(parentEntityLevel1) %>DTO.get<%= parentEntityLevel2 %>Id()));
<%_ } _%>
		//Check is currently logged-in user is the same as <%= firstToLower(parentEntityToUse) %>.owner!!!
//		if (<%= firstToLower(parentEntityToUse) %>DTO.get<%= securityLinkColumn %>() == null || <%= firstToLower(parentEntityToUse) %>DTO.get<%= securityLinkColumn %>().isEmpty() || !<%= firstToLower(parentEntityToUse) %>DTO.get<%= securityLinkColumn %>().equals(SecurityUtils.getCurrentUserLogin().get())) {
//			throw new EntityNotFoundException();
//		}
		<%= entityClass %>DTO <%= firstToLower(entityClass) %>DTO = <%= firstToLower(entityClass) %>Service.findOne(<%= firstToLower(entityClass) %>Id).orElseThrow(() -> new EntityNotFoundException());
		if (!<%= firstToLower(entityClass) %>DTO.get<%= parentEntityLevel1 %>Id().equals(<%= firstToLower(parentEntityLevel1) %>DTO.getId())) {
			throw new EntityNotFoundException();
		}
		<%= firstToLower(entityClass) %>DTO.set<%= parentEntityLevel1 %>Code(<%= firstToLower(parentEntityLevel1) %>DTO.getCode());

		HttpHeaders headers = null;
//		headers = HeaderUtil.createHiddenFieldsHeader("<%= firstToLower(parentEntityLevel1) %>Id");

		return ResponseEntity.ok()
			.headers(headers)
			.body(<%= firstToLower(entityClass) %>DTO);
	}

}
